var relearn_searchindex = [
  {
    "breadcrumb": "Cynteo Alert Bridge Docs",
    "content": "Azure Monitor Configuration Configure Azure Monitor alerts to work with Alert Bridge.\nOverview Cynteo Alert Bridge integrates with Azure Monitor using Action Groups and Common Alert Schema. This guide shows you how to configure your alerts properly.\nPrerequisites Azure subscription with Monitor alerts configured Contributor access to create/modify alert rules Alert Bridge deployed (Quick Start) Understanding Alert Flow Azure Resource ‚Üí Azure Monitor ‚Üí Alert Rule ‚Üí Action Group ‚Üí Alert Bridge ‚Üí SolarWinds\rStep 1: Create Action Group 1.1 Navigate to Action Groups Open Azure Portal Search for ‚ÄúMonitor‚Äù Click ‚ÄúAlerts‚Äù in left menu Click ‚ÄúAction groups‚Äù Click \"+ Create\" 1.2 Configure Basics Subscription: Your Azure subscription\nResource Group: Same as Alert Bridge (recommended)\nRegion: Global (default)\nAction group name: alert-bridge-solarwinds\nDisplay name: SolarWinds (shows in alert emails)\n1.3 Add Webhook Action Click ‚ÄúNext: Actions‚Äù\nAction type: Webhook\nName: Send to SolarWinds\nURI: Paste your Alert Bridge webhook URL\nTo get webhook URL:\nGo to your Alert Bridge resource group Click the Logic App (name: logicapp-*) Click ‚ÄúOverview‚Äù Copy ‚ÄúCallback URL‚Äù ‚úÖ CRITICAL: Check ‚ÄúEnable the common alert schema‚Äù\nThis ensures alerts are sent in the correct format!\n1.4 Review and Create Click ‚ÄúReview + create‚Äù ‚Üí ‚ÄúCreate‚Äù\nStep 2: Configure Existing Alerts Add Action Group to Alert Rule For each alert you want sent to SolarWinds:\nMonitor ‚Üí Alerts ‚Üí Alert rules Select an alert rule Click ‚ÄúEdit‚Äù (or ‚ÄúManage actions‚Äù) Under ‚ÄúAction groups‚Äù, click \"+ Add action group\" Select alert-bridge-solarwinds Click ‚ÄúSave‚Äù Repeat for all relevant alert rules.\nStep 3: Create New Alert Rule (Example) Example: CPU Alert for VM 3.1 Create Alert Rule Navigate to a Virtual Machine Click ‚ÄúAlerts‚Äù in left menu Click \"+ Create\" ‚Üí ‚ÄúAlert rule‚Äù 3.2 Configure Condition Signal: Percentage CPU\nThreshold: Static\nOperator: Greater than\nThreshold value: 80\nAggregation type: Average\nEvaluation period:\nAggregation granularity: 5 minutes Frequency: 5 minutes 3.3 Configure Actions Action group: Select alert-bridge-solarwinds\n3.4 Configure Details Severity: Select appropriate severity (Sev0-Sev3)\nAlert rule name: High CPU Usage\nDescription: Alert when CPU exceeds 80%\nResource group: Your resource group\nEnable rule: ‚úÖ Yes\nClick ‚ÄúReview + create‚Äù ‚Üí ‚ÄúCreate‚Äù\nAlert Severity Mapping Azure Monitor severity maps to SolarWinds priority:\nAzure Severity SolarWinds Priority Use Case Sev0 High Critical outages Sev1 High Major issues Sev2 Medium Performance degradation Sev3 Low Informational Configure this mapping during Alert Bridge deployment.\nCommon Alert Schema Why Common Alert Schema is Required Alert Bridge requires Common Alert Schema to properly parse alerts.\n‚úÖ Correct (Common Alert Schema):\n{ \"schemaId\": \"azureMonitorCommonAlertSchema\", \"data\": { \"essentials\": { \"alertId\": \"...\", \"severity\": \"Sev1\", \"monitorCondition\": \"Fired\" } } }\r‚ùå Incorrect (Legacy Schema):\n{ \"status\": \"Activated\", \"context\": { \"severity\": \"High\" } }\rHow to Enable When creating action group:\n‚úÖ Check ‚ÄúEnable the common alert schema‚Äù For existing action groups:\nEdit action group Edit webhook action ‚úÖ Check ‚ÄúEnable the common alert schema‚Äù Save Alert Types Supported Alert Bridge supports all Azure Monitor alert types:\nMetric Alerts Virtual machine metrics (CPU, memory, disk) App Service metrics (response time, errors) Storage metrics (capacity, transactions) ANY Azure resource metric Log Alerts Log Analytics queries Application Insights queries Custom log searches Activity Log Alerts Resource health events Service health notifications Administrative operations Resource Health Alerts Resource availability changes Platform-initiated events Best Practices 1. Use Descriptive Alert Names Good:\n\"Production Web App - High Response Time\"\r\"Database Server - Low Memory\"\r\"Storage Account - High Transactions\"\rBad:\n\"Alert 1\"\r\"Test\"\r\"CPU\"\rAlert name becomes the SolarWinds incident title!\n2. Set Appropriate Severity Sev0: Service down, data loss, security breach Sev1: Major functionality impaired Sev2: Degraded performance, non-critical issues Sev3: Informational, capacity planning 3. Add Helpful Descriptions Descriptions appear in SolarWinds incident details:\n\"Alert triggers when average CPU exceeds 80% for 5 minutes. Indicates potential capacity issues. Check recent deployments and scale up if needed.\"\r4. Use Dynamic Thresholds (when applicable) For variable workloads, use dynamic thresholds instead of static:\nAutomatically adapts to patterns Reduces false positives Better for seasonal/cyclical workloads 5. Configure Alert Suppression Prevent alert storms:\nEdit alert rule Advanced options ‚Üí Alert suppression Enable for appropriate duration (e.g., 5 minutes) This prevents multiple incidents for rapid-fire alerts.\nTesting Your Alerts Method 1: Lower Threshold Temporarily Edit alert rule Lower threshold to trigger immediately (e.g., CPU \u003e 1%) Save Wait 1-2 minutes Verify incident in SolarWinds Restore original threshold Method 2: Use Test Action Group Action group ‚Üí ‚ÄúTest‚Äù button Select sample alert type Click ‚ÄúTest‚Äù Check SolarWinds for test incident Troubleshooting Alert Fires But No Incident Check:\nAction group uses common alert schema ‚úÖ Webhook URL is correct Logic App run history shows success Troubleshooting Guide Incident Missing Information Cause: Legacy alert schema used\nFix: Enable common alert schema in action group\nDuplicate Incidents Cause: Multiple action groups sending same alert\nFix: Remove duplicate action groups from alert rule\nAdvanced Configuration Multi-Subscription Setup Option A: Deploy Alert Bridge in each subscription\nIsolated per subscription Separate billing per deployment Option B: Use one Alert Bridge for all subscriptions\nDeploy Alert Bridge in ‚Äúhub‚Äù subscription Get webhook URL Create action groups in each subscription pointing to same URL All alerts go to same SolarWinds instance Filtering by Resource Group Alert Bridge processes ALL alerts sent to it. To filter:\nCreate separate action groups for different resource groups Or use severity filtering Or configure SolarWinds rules to auto-close certain incidents Custom Fields Alert Bridge includes:\nAlert ID (for deduplication) Resource information Metric values Azure portal links For additional custom fields, see Advanced Configuration.\nNext Steps Configure Priority Mapping Set Up Severity Filtering Test Your Integration Need help? Contact support@cynteocloud.com",
    "description": "Azure Monitor Configuration Configure Azure Monitor alerts to work with Alert Bridge.\nOverview Cynteo Alert Bridge integrates with Azure Monitor using Action Groups and Common Alert Schema. This guide shows you how to configure your alerts properly.\nPrerequisites Azure subscription with Monitor alerts configured Contributor access to create/modify alert rules Alert Bridge deployed (Quick Start) Understanding Alert Flow Azure Resource ‚Üí Azure Monitor ‚Üí Alert Rule ‚Üí Action Group ‚Üí Alert Bridge ‚Üí SolarWinds\rStep 1: Create Action Group 1.1 Navigate to Action Groups Open Azure Portal Search for ‚ÄúMonitor‚Äù Click ‚ÄúAlerts‚Äù in left menu Click ‚ÄúAction groups‚Äù Click \"+ Create\" 1.2 Configure Basics Subscription: Your Azure subscription\nResource Group: Same as Alert Bridge (recommended)\nRegion: Global (default)\nAction group name: alert-bridge-solarwinds\nDisplay name: SolarWinds (shows in alert emails)",
    "tags": [],
    "title": "Overview",
    "uri": "/overview/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs",
    "content": "üöÄ Quick Links Get Started - Deployment guide Features - What Alert Bridge can do Troubleshooting - Common issues Support - Get help",
    "description": "üöÄ Quick Links Get Started - Deployment guide Features - What Alert Bridge can do Troubleshooting - Common issues Support - Get help",
    "tags": [],
    "title": "Quick Links",
    "uri": "/quicklinks/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs¬†\u003e¬†Usage Guide",
    "content": "Priority Mapping Learn how to map Azure Monitor alert severities to SolarWinds Service Desk priority levels.\nOverview Azure Monitor uses severities (Sev0-Sev4), while SolarWinds uses priorities (Critical, High, Medium, Low). Alert Bridge maps between these automatically.\nDefault Mapping Out of the box, Alert Bridge uses this mapping:\nAzure Severity SolarWinds Priority Description Sev0 Critical System down, immediate action required Sev1 High Major functionality impaired Sev2 Medium Moderate impact, workaround available Sev3 Low Minor issue, minimal impact Sev4 Low Informational, no immediate action Customizing Priority Mapping Priority mapping is configured during deployment. The solution can be customized to match your organization‚Äôs SolarWinds priority structure.\nTo request a priority mapping change, contact support@cynteocloud.com with your desired mapping.\nSolarWinds Priority Values Your SolarWinds instance may have different priority names. Common priority structures include:\nStandard SolarWinds Priorities:\nCritical High Medium Low Your organization may use custom priority names. The mapping is configured to match your specific SolarWinds priority structure during deployment.\nCustom Priority Examples Alert Bridge supports various priority mapping strategies:\nExample 1: Escalated Priorities All critical and error alerts mapped to high priority for faster response.\nExample 2: Custom Priority Names Organizations using custom priority names (e.g., ‚ÄúP1 - Critical‚Äù, ‚ÄúP2 - Urgent‚Äù) can configure the mapping accordingly.\nExample 3: Simplified Mapping Some organizations prefer to use only two priority levels (Critical and Normal) for simplicity.\nExample 4: Environment-Specific Different environments (Production vs Development) can use different priority mappings to reflect business impact.\nVerifying Priority Mapping When an Azure alert fires, you can verify the priority mapping worked correctly:\nCheck the SolarWinds Incident Open SolarWinds Service Desk Find the incident created from the alert Verify the priority field matches expectations For example, an Azure Sev1 alert should create a High priority incident (based on default mapping).\nPriority-Based Routing Different priority levels can trigger different response workflows in SolarWinds:\nSolarWinds Assignment Rules SolarWinds supports automatic assignment based on priority:\nCritical Priority ‚Üí Route to On-Call Team High Priority ‚Üí Route to Infrastructure Team Medium/Low Priority ‚Üí Route to Operations Team This ensures the right team receives alerts based on severity.\nAdvanced Priority Scenarios Alert Bridge supports advanced priority mapping strategies including:\nResource Type Based - Different resources can have different priority mappings Environment Based - Production alerts prioritized higher than development Time-Based - After-hours alerts automatically escalated Tag-Based - Resource tags influence priority assignment Contact support@cynteocloud.com to discuss custom mapping requirements.\nSee Also Configuration Options - Available settings Severity Filtering - Filter by severity Custom Categories - SolarWinds categories Questions? Contact support@cynteocloud.com",
    "description": "Configure how Azure alert severities map to SolarWinds priorities",
    "tags": [],
    "title": "Priority Mapping",
    "uri": "/usage/prioritymapping/prioritymapping/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs¬†\u003e¬†Usage Guide",
    "content": "Summary This section describes usage guidance.",
    "description": "Usage Guidance for the Cynteo Alert Brige",
    "tags": [],
    "title": "ActionGroup",
    "uri": "/usage/actiongroup/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs¬†\u003e¬†Usage Guide",
    "content": "Severity Filtering Configure Alert Bridge to only create incidents for specific severity levels.\nOverview Not all alerts need a ticket. Use severity filtering to:\nReduce ticket noise Focus on critical issues Save SolarWinds API calls Improve team efficiency Azure Alert Severities Azure Monitor supports 5 severity levels:\nSeverity Description Typical Use Sev0 Critical Service outage, data loss Sev1 Error Major degradation, multiple users affected Sev2 Warning Performance issues, single user affected Sev3 Informational Potential issues, proactive monitoring Sev4 Verbose Debug info, detailed diagnostics Filtering Options Severity filtering is configured during deployment to control which alerts create incidents.\nOption 1: Whitelist Specific Severities Only create incidents for specific severities (e.g., only Sev0 and Sev1).\nResult: Only critical and error alerts create incidents. Warning and informational alerts are ignored.\nOption 2: Minimum Severity Threshold Create incidents for alerts at or above a severity threshold (e.g., Sev2 and above).\nResult: Critical, error, and warning alerts create incidents. Informational alerts are ignored.\nOption 3: No Filtering (Default) All severities create incidents for comprehensive tracking.\nTo configure severity filtering, specify your requirements during deployment or contact support@cynteocloud.com.\nCommon Filtering Scenarios Scenario 1: Critical Only Only create incidents for service outages (Sev0 alerts).\nUse Case: Production environments where only critical issues need immediate attention through tickets.\nScenario 2: Critical and High Create incidents for major issues (Sev0 and Sev1 alerts).\nUse Case: Balance between noise reduction and comprehensive tracking of significant issues.\nScenario 3: Warning and Above Exclude informational alerts (Sev3 and Sev4 filtered out).\nUse Case: Keep informational alerts in Azure Monitor but don‚Äôt create tickets for them.\nScenario 4: Environment-Specific Filtering Different environments can have different filtering rules.\nExample:\nProduction: Track Sev0, Sev1, and Sev2 alerts Development: Only track Sev0 alerts Understanding Your Filtering When configured, severity filtering automatically processes alerts according to your rules:\nMatching alerts ‚Üí Create/update incidents in SolarWinds Filtered alerts ‚Üí Logged but no incident created You can verify filtering is working by checking SolarWinds for which incidents are being created.\nAdvanced Filtering Scenarios Alert Bridge supports sophisticated filtering strategies beyond simple severity levels:\nResource Type Filtering Filter based on Azure resource type (e.g., only create tickets for VM and database alerts).\nTime-Based Filtering Apply different filtering rules based on time of day or day of week (e.g., all severities during business hours, critical only after hours).\nTag-Based Filtering Use Azure resource tags to control which resources create incidents.\nMulti-Criteria Filtering Combine severity with other factors like subscription, resource group, or alert type.\nFilter Strategy Best Practices Start Strict, Relax as Needed Organizations often start with stricter filtering (critical alerts only) and gradually expand to include additional severities based on operational needs.\nEnvironment-Appropriate Filtering Environment Typical Filter Production Sev0, Sev1, Sev2 Staging Sev0, Sev1 Development Sev0 only Monitor the Full Picture Even when alerts are filtered from ticket creation, they remain visible in Azure Monitor for trending and analysis.\nQuestions About Filtering? To configure or adjust severity filtering for your deployment, contact support@cynteocloud.com.\nSee Also Priority Mapping - Map severities to priorities Configuration Options - Available settings Azure Monitor Setup - Alert configuration Questions? Contact support@cynteocloud.com",
    "description": "Filter which alert severities create SolarWinds incidents",
    "tags": [],
    "title": "Severity Filtering",
    "uri": "/usage/severityfiltering/severityfiltering/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs",
    "content": "Summary This section describes usage guidance.",
    "description": "Usage Guidance for the Cynteo Alert Brige",
    "tags": [],
    "title": "Usage Guide",
    "uri": "/usage/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs¬†\u003e¬†Usage Guide¬†\u003e¬†Action Group Setup Guide",
    "content": "Complete guide to setting up Azure Monitor action groups for Alert Bridge.\nWhat is an Action Group? An Action Group is a collection of notification and action settings that can be reused across multiple alert rules. It defines what happens when an alert fires.\nFor Alert Bridge, the action group sends alert data to your SolarWinds integration via webhook.\nPrerequisites Azure subscription Alert Bridge deployed and running Contributor access to create action groups Step-by-Step Guide Step 1: Get Webhook URL Go to Azure Portal ‚Üí Resource Groups Find your Alert Bridge resource group (e.g., rg-alert-bridge) Click the Logic App resource (name: logicapp-*) Click ‚ÄúOverview‚Äù tab Find ‚ÄúWorkflow URL‚Äù or ‚ÄúCallback URL‚Äù Click ‚ÄúCopy URL‚Äù button The URL looks like:\nhttps://prod-123.eastus.logic.azure.com:443/workflows/abc123.../triggers/manual/paths/invoke?api-version=2016-10-01\u0026sp=%2Ftriggers...\rKeep this URL handy - you‚Äôll need it in the next step.\nStep 2: Create Action Group Navigate to Action Groups In Azure Portal, search for ‚ÄúMonitor‚Äù Click ‚ÄúAlerts‚Äù in the left navigation Click ‚ÄúAction groups‚Äù Click \"+ Create\" button Basics Tab Subscription: Select your Azure subscription\nResource Group: Select same as Alert Bridge (recommended)\nRegion: Global (default)\nAction group name: alert-bridge-solarwinds\nDisplay name: SolarWinds\nNote: Display name appears in email/SMS notifications, keep it short!\nClick ‚ÄúNext: Notifications \u003e‚Äù (skip for now)\nNotifications Tab Skip this tab - we‚Äôll use Actions instead.\nClick ‚ÄúNext: Actions \u003e‚Äù\nActions Tab Click ‚Äú+ Add action‚Äù\nAction type: Select ‚ÄúWebhook‚Äù from dropdown\nName: Send to SolarWinds\nDetails:\nURI: Paste the webhook URL from Step 1 Enable common alert schema: ‚úÖ CHECKED (Critical!) Click ‚ÄúOK‚Äù\nImportant: The ‚ÄúEnable common alert schema‚Äù checkbox MUST be checked for alerts to work properly!\nTags Tab (Optional) Add tags if desired:\nEnvironment: Production Purpose: ITSM Integration Click ‚ÄúNext: Review + create \u003e‚Äù\nReview and Create Review your settings Ensure ‚ÄúEnable common alert schema‚Äù shows Yes Click ‚ÄúCreate‚Äù Wait ~30 seconds for creation to complete.\nStep 3: Test Action Group Manual Test After creation, click your action group name Click ‚ÄúTest action group‚Äù button (top toolbar) Sample type: Select ‚ÄúMetric Alert - CPU Percentage‚Äù Action type: Webhook Click ‚ÄúTest‚Äù button Verify Results In Azure:\nYou should see ‚ÄúTest completed successfully‚Äù Check timestamp to confirm it just ran In SolarWinds:\nGo to Incidents list Look for a new incident titled: ‚ÄúAzure Alert: Test‚Äù Should appear within 1-2 minutes If incident appears: ‚úÖ Success! Your action group works!\nIf not: See Troubleshooting below\nStep 4: Add to Alert Rules Now add this action group to your existing alert rules:\nFor Each Alert Rule: Monitor ‚Üí Alerts ‚Üí Alert rules Click an alert rule you want to send to SolarWinds Click ‚ÄúEdit‚Äù or ‚ÄúManage actions‚Äù Action groups section ‚Üí Click \"+ Add action group\" Select alert-bridge-solarwinds Click ‚ÄúSave‚Äù Repeat for all relevant alerts.\nAdvanced Configuration Multiple Action Groups You can create multiple action groups for different scenarios:\nExample 1: By Environment\nalert-bridge-prod - Production alerts only alert-bridge-dev - Development alerts Example 2: By Severity\nalert-bridge-critical - Sev0 and Sev1 only alert-bridge-info - Sev2 and Sev3 Example 3: By Team\nalert-bridge-infrastructure alert-bridge-application Adding Multiple Actions You can add multiple actions to one action group:\nExample: Email + SolarWinds\nAdd webhook action (SolarWinds) Add email action (ops@company.com) Both happen when alert fires Suppress Alerts Configure action group suppression to prevent alert storms:\nEdit alert rule Advanced options ‚Üí Alert suppression Suppress alerts for: 5 minutes Save This prevents duplicate alerts within 5 minutes.\nTroubleshooting Test Failed: ‚ÄúBad Request‚Äù Cause: Common alert schema not enabled\nFix:\nEdit action group Edit webhook action ‚úÖ Check ‚ÄúEnable common alert schema‚Äù Save and test again Test Succeeded But No Incident Possible causes:\n1. Check Logic App Run History\nGo to Logic App resource Click ‚ÄúOverview‚Äù ‚Üí ‚ÄúRuns history‚Äù Find the recent run Click to see details If succeeded: Issue is with SolarWinds API\nIf failed: Check error message\n2. Check SolarWinds API Token\nVerify token is valid Check token has create incident permission See SolarWinds Setup 3. Check Logic App Configuration\nEnsure API token stored in Key Vault Verify Key Vault access policy allows Logic App Check SolarWinds base URL is correct Incidents Created But Missing Data Cause: Legacy alert schema used\nFix:\nEdit action group webhook action ‚úÖ Ensure ‚ÄúEnable common alert schema‚Äù is checked Save Multiple Duplicate Incidents Cause: Multiple action groups configured for same alert\nFix:\nCheck alert rule ‚Üí Actions Remove duplicate action groups Keep only one SolarWinds action group per alert Common Alert Schema Example When ‚ÄúEnable common alert schema‚Äù is checked, Azure sends:\n{ \"schemaId\": \"azureMonitorCommonAlertSchema\", \"data\": { \"essentials\": { \"alertId\": \"/subscriptions/.../Microsoft.Insights/...\", \"alertRule\": \"High CPU Usage\", \"severity\": \"Sev1\", \"signalType\": \"Metric\", \"monitorCondition\": \"Fired\", \"monitoringService\": \"Platform\", \"alertTargetIDs\": [\"/subscriptions/.../Microsoft.Compute/virtualMachines/vm1\"], \"configurationItems\": [\"vm1\"], \"originAlertId\": \"abc123\", \"firedDateTime\": \"2025-10-29T10:00:00Z\", \"description\": \"CPU has been above threshold\", \"essentialsVersion\": \"1.0\", \"alertContextVersion\": \"1.0\" }, \"alertContext\": { \"properties\": null, \"conditionType\": \"SingleResourceMultipleMetricCriteria\", \"condition\": { \"windowSize\": \"PT5M\", \"allOf\": [ { \"metricName\": \"Percentage CPU\", \"metricNamespace\": \"Microsoft.Compute/virtualMachines\", \"operator\": \"GreaterThan\", \"threshold\": \"80\", \"timeAggregation\": \"Average\", \"dimensions\": [], \"metricValue\": 95.5 } ] } } } }\rAlert Bridge uses this structured data to create rich SolarWinds incidents!\nBest Practices 1. Use Descriptive Names Good: alert-bridge-prod-infrastructure\nBad: ag1\n2. One Action Group Per Environment Separate prod and non-prod alerts:\nBetter control Different SolarWinds priorities Easier troubleshooting 3. Document Your Action Groups Add tags and descriptions:\nName: alert-bridge-prod\rDescription: Sends production alerts to SolarWinds Service Desk\rTags: Environment=Production, System=ITSM\r4. Test Regularly Test action groups:\nAfter creation After any configuration changes Monthly as part of DR testing 5. Monitor Action Group Usage Use Azure Monitor to track:\nAction group invocations Failures Latency Security Considerations Webhook URL Security The webhook URL contains:\nAPI version - Safe to expose Signature parameter - Validates request authenticity Access token - Securely embedded Keep the URL private but it‚Äôs safe if leaked (signature validation prevents abuse).\nRotating URLs If webhook URL is compromised:\nGo to Logic App Settings ‚Üí Access control Regenerate access key Update all action groups with new URL Next Steps Configure Priority Mapping Set Up Severity Filtering Test Your Integration Additional Resources Azure Action Groups Documentation Common Alert Schema Reference Webhook Action Reference Need help? Contact support@cynteocloud.com",
    "description": "Bicep Quickstart Guidance for the Azure Verified Modules (AVM) program",
    "tags": [],
    "title": "Action Group Setup Guide",
    "uri": "/usage/actiongroup/actiongroup/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Cynteo Alert Bridge Docs",
    "uri": "/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/tags/index.html"
  }
]
