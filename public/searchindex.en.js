var relearn_searchindex = [
  {
    "breadcrumb": "Cynteo Alert Bridge Docs \u003e Troubleshooting",
    "content": "Common Issues and Solutions Quick solutions to the most common Alert Bridge problems.\nAlerts Not Creating Incidents Symptom Alert fires in Azure Monitor, but no incident appears in SolarWinds.\nDiagnosis Steps 1. Check Action Group Configuration\nGo to Monitor → Alerts → Action groups Click your action group Verify webhook action exists ✅ Confirm “Enable common alert schema” is checked 2. Check Logic App Run History\nGo to Alert Bridge resource group Click Logic App resource Click “Overview” → “Runs history” Look for recent runs If no runs: Action group not triggering\nIf runs exist: Click run to see details\n3. Check Logic App Run Details\nSuccess (green checkmark):\nIncident should be in SolarWinds Check SolarWinds with search for alert name Failed (red X):\nClick failed step Read error message See specific error solutions below Common Causes and Fixes Cause 1: Common Alert Schema Not Enabled Error: Cannot read property 'essentials' of undefined\nFix:\nEdit action group Edit webhook action ✅ Check “Enable the common alert schema” Save Cause 2: Invalid SolarWinds API Token Error: 401 Unauthorized or 403 Forbidden\nFix:\nGenerate new API token in SolarWinds Go to Key Vault resource in Alert Bridge resource group Click “Secrets” Find secret (name: solarwinds-*) Click “New version” Paste new token Save Cause 3: SolarWinds Category Doesn’t Exist Error: Category not found\nFix:\nOption A: Create category in SolarWinds Option B: Update Logic App to use existing category (contact support) Cause 4: Requester Email Invalid Error: Requester not found\nFix:\nCreate user in SolarWinds with that email, OR Update Logic App to use existing email (contact support) Duplicate Incidents Created Symptom Multiple incidents created for the same alert.\nCauses 1. Alert ID Changed\nAzure generates new alert ID Alert Bridge can’t deduplicate Fix: Not much you can do - this is Azure Monitor behavior\n2. Multiple Action Groups\nSame alert has multiple action groups pointing to Alert Bridge Fix:\nCheck alert rule → Actions Remove duplicate action groups 3. Storage Table Issue\nAlert tracking table corrupted Fix: Contact support to clear tracking table\nIncidents Not Resolving Symptom Alert resolves in Azure but incident stays open in SolarWinds.\nDiagnosis 1. Check Alert Resolved Notification\nAlerts must send “Resolved” notification Some alert rules don’t send resolution notifications Fix:\nEdit alert rule Advanced options ✅ Check “Automatically resolve alerts” Save 2. Check Logic App Resolution Logic\nGo to Logic App run history Find run when alert resolved Check if monitorCondition = \"Resolved\" If not “Resolved”: Azure not sending resolution notification\nIncident Missing Information Symptom Incident created but description is empty or incomplete.\nCause Legacy alert schema used instead of common alert schema.\nFix Edit action group Edit webhook action ✅ Ensure “Enable common alert schema” is checked Save Test with new alert High Latency (Slow Incident Creation) Symptom Alerts take \u003e 5 minutes to create incidents.\nNormal Latency Azure Monitor detection: 1-5 minutes Action group trigger: \u003c 30 seconds Alert Bridge processing: \u003c 10 seconds SolarWinds API: \u003c 5 seconds Total: Usually 2-6 minutes If Longer Than 10 Minutes 1. Check Logic App Performance\nGo to Logic App → Overview Check “Failed runs” Check “Throttled runs” 2. Check SolarWinds API Performance\nIf SolarWinds is slow, incidents will be delayed Contact SolarWinds support 3. Check Azure Region Issues\nAzure Service Health may show incidents Check Azure Status Incidents Have Wrong Priority Symptom Incident priority doesn’t match alert severity.\nCause Priority mapping configured incorrectly during deployment.\nCheck Current Mapping Go to Alert Bridge Function App Settings → Configuration Check environment variables: PRIORITY_SEV0 PRIORITY_SEV1 PRIORITY_SEV2 PRIORITY_SEV3 Fix See Priority Mapping Guide\nDeployment Errors “Resource names must be unique” Cause: Resource name conflict with existing resources.\nFix:\nDelete the resource group if it exists Deploy again (Alert Bridge generates new unique names) “Insufficient permissions” Cause: You don’t have Owner/Contributor role on subscription.\nFix:\nAsk subscription owner to grant you Contributor role OR ask them to deploy for you “Managed application already exists” Cause: Previous deployment wasn’t fully cleaned up.\nFix:\nGo to Managed applications Find old deployment Delete it Wait 5 minutes Deploy again Usage and Billing Issues “Exceeded alert limit” Symptom: Email notification that you’ve reached plan limit.\nWhat Happens Soft limit: No service interruption Alerts continue to create incidents Overage charges may apply (if configured) Fix Upgrade plan if consistently over limit Or implement severity filtering API Token Rotation Need to Update Token When to rotate:\nEvery 90 days (security best practice) If token compromised If permissions change How to update:\nGenerate new token in SolarWinds\nSee SolarWinds Setup Update in Key Vault\nGo to Key Vault in Alert Bridge resource group Secrets → Find your secret New version → Paste new token Save Test\nTrigger test alert Verify incident created No restart needed - Logic App uses Key Vault reference and picks up new version automatically!\nLogic App Disabled or Stopped Symptom Alerts stop creating incidents suddenly.\nCheck Logic App Status Go to Logic App resource Check Status at top Should be “Enabled” If Disabled Re-enable:\nClick “Enable” button Wait ~30 seconds Test with alert Why it happened:\nManual disable Too many failures (Azure auto-disables) Billing issue Cannot Find Webhook URL Need webhook URL to create action group How to find it:\nAzure Portal → Your resource group Click Logic App resource (name: logicapp-*) Click “Overview” tab Look for “Workflow URL” or “Callback URL” Click copy button If URL not visible:\nYou may not have permission (need Reader role) Ask deployment owner to share URL SolarWinds Tickets Have Wrong Category Symptom Incidents created in wrong category.\nCause Category configured during deployment.\nCheck Current Category Go to Function App Settings → Configuration Check INCIDENT_CATEGORY value Fix Contact support to update category (requires redeployment or manual config)\nGetting Help Before Contacting Support Please gather:\nLogic App run history\nScreenshot of failed run Error message Alert details\nAlert rule name Severity Time it fired Action group config\nScreenshot showing “Enable common alert schema” status What you’ve tried\nList of troubleshooting steps Contact Support Email: support@cynteocloud.com\nInclude:\nProblem description Screenshots Steps to reproduce Azure subscription ID (if sharing access) Response time:\nStandard: \u003c 24 hours Enterprise: \u003c 4 hours Additional Resources Deployment Errors Alert Not Creating Tickets Quick Start Guide Configuration Guides Still stuck? Email support@cynteocloud.com with details.",
    "description": "Quick solutions to the most common Alert Bridge problems",
    "tags": [],
    "title": "Common Issues and Solutions",
    "uri": "/troubleshooting/common-issues/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs \u003e Reference Docs",
    "content": "Incident Fields Reference Complete reference of what data Alert Bridge sends to SolarWinds Service Desk incidents.\nIncident Structure Every incident created by Alert Bridge includes:\nBasic Fields Field Type Source Example name String Azure alert rule name Azure Alert: High CPU Usage priority String Severity mapping High, Medium, Low description HTML Enriched alert data See Description Format category Object Configuration {\"name\": \"Infrastructure\"} subcategory Object Configuration {\"name\": \"Azure Monitor\"} requester Object Configuration {\"email\": \"azure@company.com\"} state String Alert condition New, In Progress, Resolved Optional Fields Field Type When Included Example group_assignee Object If configured {\"name\": \"Cloud Ops\"} resolution_description String On resolution Resolved automatically by Azure Monitor... Description Format The incident description is rich HTML containing all alert context:\nExample Description \u003cp\u003e\u003cstrong\u003e[ALERT] Azure Monitor Alert\u003c/strong\u003e\u003c/p\u003e \u003chr\u003e \u003cp\u003e\u003cstrong\u003eAlert Information:\u003c/strong\u003e\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cstrong\u003eName:\u003c/strong\u003e High CPU Usage\u003c/li\u003e \u003cli\u003e\u003cstrong\u003eSeverity:\u003c/strong\u003e Sev1\u003c/li\u003e \u003cli\u003e\u003cstrong\u003eStatus:\u003c/strong\u003e Fired\u003c/li\u003e \u003cli\u003e\u003cstrong\u003eSignal Type:\u003c/strong\u003e Metric\u003c/li\u003e \u003cli\u003e\u003cstrong\u003eMonitoring Service:\u003c/strong\u003e Platform\u003c/li\u003e \u003cli\u003e\u003cstrong\u003eFired At:\u003c/strong\u003e 2025-10-29T10:00:00Z\u003c/li\u003e \u003c/ul\u003e \u003cp\u003e\u003cstrong\u003eAffected Resource:\u003c/strong\u003e\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cstrong\u003eName:\u003c/strong\u003e vm-prod-web-01\u003c/li\u003e \u003cli\u003e\u003cstrong\u003eType:\u003c/strong\u003e Microsoft.Compute/virtualMachines\u003c/li\u003e \u003cli\u003e\u003cstrong\u003eResource Group:\u003c/strong\u003e rg-production\u003c/li\u003e \u003cli\u003e\u003cstrong\u003eSubscription:\u003c/strong\u003e sub-12345678-abcd-...\u003c/li\u003e \u003c/ul\u003e \u003cp\u003e\u003cstrong\u003eMetric Details:\u003c/strong\u003e\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cstrong\u003eMetric:\u003c/strong\u003e Percentage CPU\u003c/li\u003e \u003cli\u003e\u003cstrong\u003eCondition:\u003c/strong\u003e Average GreaterThan 80\u003c/li\u003e \u003cli\u003e\u003cstrong\u003eCurrent Value:\u003c/strong\u003e 95.5\u003c/li\u003e \u003c/ul\u003e \u003cp\u003e\u003cstrong\u003eEvaluation Window:\u003c/strong\u003e PT5M\u003c/p\u003e \u003cp\u003e\u003cem\u003ePeriod: 2025-10-29T09:55:00Z to 2025-10-29T10:00:00Z\u003c/em\u003e\u003c/p\u003e \u003chr\u003e \u003cp\u003e\u003cstrong\u003eQuick Actions:\u003c/strong\u003e\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"https://portal.azure.com/#...\"\u003e[VIEW] View This Alert Instance\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://portal.azure.com/#...\"\u003e[CONFIGURE] Edit Alert Rule Settings\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://portal.azure.com/#...\"\u003e[RESOURCE] View Affected Resource in Portal\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\rDescription Sections 1. Alert Information Alert rule name Severity (Sev0-Sev3) Monitor condition (Fired/Resolved) Signal type (Metric/Log/Activity Log) When it fired 2. Affected Resource Resource name Resource type Resource group Subscription ID 3. Metric Details (for Metric Alerts) Metric name Threshold condition Current value Time aggregation method 4. Log Search Details (for Log Alerts) Query results count Search query Links to log results 5. Activity Log Details (for Activity Alerts) Operation name Status Caller 6. Alert History (if repeat occurrence) Number of occurrences First occurrence time Pattern indicator 7. Quick Action Links View alert in Azure Portal Edit alert rule View affected resource Alert States State Transitions New → In Progress → Resolved ↑ | └──────────────────────┘ (New occurrence)\rState Descriptions State When Incident Action New First time alert fires Create incident In Progress Alert fires again (update) Update incident Resolved Alert condition clears Resolve incident Priority Mapping Default mapping (configurable):\nAzure Severity SolarWinds Priority Typical Use Sev0 High Critical outages, data loss Sev1 High Major functionality impaired Sev2 Medium Performance degradation Sev3 Low Informational, capacity planning Customize: See Priority Mapping Guide\nCategory and Subcategory Default Values Category: Infrastructure Subcategory: Azure Monitor Auto-Detection Alert Bridge automatically detects category based on resource type:\nResource Type Category Virtual Machines Infrastructure App Service Application SQL Database Database Storage Account Storage Virtual Network Network Key Vault Security Kubernetes Platform Override: Configure during deployment\nComments When Comments Are Added Comments update existing incidents instead of creating new ones:\nConditions for adding comment:\nAlert fires again on same resource Time since last update \u003e 5 minutes (configurable) OR metric value changed \u003e 10% Comment includes:\nCurrent time Monitor condition Current metric value Change from last value Occurrence number Links to Azure Portal Example Comment [UPDATE] Alert Status Update • Monitor Condition: Fired • Time: 2025-10-29T10:15:00Z • Current Value: 92.3 (+2.1 from last) • Occurrence: #3 • Pattern: Recurring issue (3 occurrences) Alert continues to fire. Monitoring situation. [View Alert] | [Edit Rule]\rSmart Deduplication To prevent comment spam:\nMinimum 5 minutes between comments (configurable) Only comment if metric changed significantly Resolution uses resolution_description instead Resolution Fields When alert resolves:\nIncident Updates { \"state\": \"Resolved\", \"resolution_description\": \"Resolved automatically by Azure Monitor. Alert condition returned to normal.\" }\rResolution Description Includes Resolution time Total duration Total occurrences Automatic resolution note Example [RESOLVED] Alert Cleared by Azure Monitor • Resolution Time: 2025-10-29T10:30:00Z • Total Duration: 30 minutes • Total Occurrences: 3 • Alert automatically cleared - condition returned to normal This incident has been automatically resolved. [View Alert Details]\rRequester Email The requester is the “who created this incident” field in SolarWinds.\nRequirements Must be valid email Should exist in SolarWinds as a user OR SolarWinds auto-creates user (if enabled) Best Practices Option A: Service Account\nazure-monitor@company.com\rOption B: Team Inbox\ncloudops@company.com\rOption C: Shared Account\nitsm-automation@company.com\rNot recommended:\nIndividual personal emails Distribution lists (unless they’re users in SolarWinds) Field Limits Character Limits Field Max Length Truncation name 255 chars ... added description 32,000 chars Rare, full alerts fit category 100 chars Error if exceeded priority 20 chars Predefined values Array Limits Field Max Items alertTargetIDs 100 resources configurationItems 100 items Data Not Included Alert Bridge does NOT send:\n❌ Azure subscription credentials ❌ Resource access keys ❌ Connection strings ❌ Secrets from Key Vault ❌ VM passwords ❌ Storage account keys Only metadata and metrics are sent to SolarWinds.\nCustom Fields (Coming Soon) Future versions will support:\nCustom incident fields Additional tags Custom descriptions Field mapping rules View Roadmap\nExample: Full Incident Payload What Alert Bridge sends to SolarWinds API:\n{ \"incident\": { \"name\": \"Azure Alert: High CPU Usage\", \"priority\": \"High\", \"description\": \"\u003cp\u003e\u003cstrong\u003e[ALERT] Azure Monitor Alert\u003c/strong\u003e\u003c/p\u003e...\", \"category\": { \"name\": \"Infrastructure\" }, \"subcategory\": { \"name\": \"Azure Monitor\" }, \"requester\": { \"email\": \"azure-monitor@company.com\" }, \"group_assignee\": { \"name\": \"Cloud Operations\" } } }\rSee Also Alert Schema - Input from Azure Monitor Environment Variables - Configuration options Priority Mapping - Customize mapping SolarWinds API - Official docs Questions? Contact support@cynteocloud.com",
    "description": "Complete reference of what data Alert Bridge sends to SolarWinds Service Desk incidents",
    "tags": [],
    "title": "Incident Fields Reference",
    "uri": "/reference/incidentfields/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs",
    "content": "Azure Monitor Configuration Configure Azure Monitor alerts to work with Alert Bridge.\nOverview Cynteo Alert Bridge integrates with Azure Monitor using Action Groups and Common Alert Schema. This guide shows you how to configure your alerts properly.\nPrerequisites Azure subscription with Monitor alerts configured Contributor access to create/modify alert rules Alert Bridge deployed (Quick Start) Understanding Alert Flow Azure Resource → Azure Monitor → Alert Rule → Action Group → Alert Bridge → SolarWinds\rStep 1: Create Action Group 1.1 Navigate to Action Groups Open Azure Portal Search for “Monitor” Click “Alerts” in left menu Click “Action groups” Click \"+ Create\" 1.2 Configure Basics Subscription: Your Azure subscription\nResource Group: Same as Alert Bridge (recommended)\nRegion: Global (default)\nAction group name: alert-bridge-solarwinds\nDisplay name: SolarWinds (shows in alert emails)\n1.3 Add Webhook Action Click “Next: Actions”\nAction type: Webhook\nName: Send to SolarWinds\nURI: Paste your Alert Bridge webhook URL\nTo get webhook URL:\nGo to your Alert Bridge resource group Click the Logic App (name: logicapp-*) Click “Overview” Copy “Callback URL” ✅ CRITICAL: Check “Enable the common alert schema”\nThis ensures alerts are sent in the correct format!\n1.4 Review and Create Click “Review + create” → “Create”\nStep 2: Configure Existing Alerts Add Action Group to Alert Rule For each alert you want sent to SolarWinds:\nMonitor → Alerts → Alert rules Select an alert rule Click “Edit” (or “Manage actions”) Under “Action groups”, click \"+ Add action group\" Select alert-bridge-solarwinds Click “Save” Repeat for all relevant alert rules.\nStep 3: Create New Alert Rule (Example) Example: CPU Alert for VM 3.1 Create Alert Rule Navigate to a Virtual Machine Click “Alerts” in left menu Click \"+ Create\" → “Alert rule” 3.2 Configure Condition Signal: Percentage CPU\nThreshold: Static\nOperator: Greater than\nThreshold value: 80\nAggregation type: Average\nEvaluation period:\nAggregation granularity: 5 minutes Frequency: 5 minutes 3.3 Configure Actions Action group: Select alert-bridge-solarwinds\n3.4 Configure Details Severity: Select appropriate severity (Sev0-Sev3)\nAlert rule name: High CPU Usage\nDescription: Alert when CPU exceeds 80%\nResource group: Your resource group\nEnable rule: ✅ Yes\nClick “Review + create” → “Create”\nAlert Severity Mapping Azure Monitor severity maps to SolarWinds priority:\nAzure Severity SolarWinds Priority Use Case Sev0 High Critical outages Sev1 High Major issues Sev2 Medium Performance degradation Sev3 Low Informational Configure this mapping during Alert Bridge deployment.\nCommon Alert Schema Why Common Alert Schema is Required Alert Bridge requires Common Alert Schema to properly parse alerts.\n✅ Correct (Common Alert Schema):\n{ \"schemaId\": \"azureMonitorCommonAlertSchema\", \"data\": { \"essentials\": { \"alertId\": \"...\", \"severity\": \"Sev1\", \"monitorCondition\": \"Fired\" } } }\r❌ Incorrect (Legacy Schema):\n{ \"status\": \"Activated\", \"context\": { \"severity\": \"High\" } }\rHow to Enable When creating action group:\n✅ Check “Enable the common alert schema” For existing action groups:\nEdit action group Edit webhook action ✅ Check “Enable the common alert schema” Save Alert Types Supported Alert Bridge supports all Azure Monitor alert types:\nMetric Alerts Virtual machine metrics (CPU, memory, disk) App Service metrics (response time, errors) Storage metrics (capacity, transactions) ANY Azure resource metric Log Alerts Log Analytics queries Application Insights queries Custom log searches Activity Log Alerts Resource health events Service health notifications Administrative operations Resource Health Alerts Resource availability changes Platform-initiated events Best Practices 1. Use Descriptive Alert Names Good:\n\"Production Web App - High Response Time\"\r\"Database Server - Low Memory\"\r\"Storage Account - High Transactions\"\rBad:\n\"Alert 1\"\r\"Test\"\r\"CPU\"\rAlert name becomes the SolarWinds incident title!\n2. Set Appropriate Severity Sev0: Service down, data loss, security breach Sev1: Major functionality impaired Sev2: Degraded performance, non-critical issues Sev3: Informational, capacity planning 3. Add Helpful Descriptions Descriptions appear in SolarWinds incident details:\n\"Alert triggers when average CPU exceeds 80% for 5 minutes. Indicates potential capacity issues. Check recent deployments and scale up if needed.\"\r4. Use Dynamic Thresholds (when applicable) For variable workloads, use dynamic thresholds instead of static:\nAutomatically adapts to patterns Reduces false positives Better for seasonal/cyclical workloads 5. Configure Alert Suppression Prevent alert storms:\nEdit alert rule Advanced options → Alert suppression Enable for appropriate duration (e.g., 5 minutes) This prevents multiple incidents for rapid-fire alerts.\nTesting Your Alerts Method 1: Lower Threshold Temporarily Edit alert rule Lower threshold to trigger immediately (e.g., CPU \u003e 1%) Save Wait 1-2 minutes Verify incident in SolarWinds Restore original threshold Method 2: Use Test Action Group Action group → “Test” button Select sample alert type Click “Test” Check SolarWinds for test incident Troubleshooting Alert Fires But No Incident Check:\nAction group uses common alert schema ✅ Webhook URL is correct Logic App run history shows success Troubleshooting Guide Incident Missing Information Cause: Legacy alert schema used\nFix: Enable common alert schema in action group\nDuplicate Incidents Cause: Multiple action groups sending same alert\nFix: Remove duplicate action groups from alert rule\nAdvanced Configuration Multi-Subscription Setup Option A: Deploy Alert Bridge in each subscription\nIsolated per subscription Separate billing per deployment Option B: Use one Alert Bridge for all subscriptions\nDeploy Alert Bridge in “hub” subscription Get webhook URL Create action groups in each subscription pointing to same URL All alerts go to same SolarWinds instance Filtering by Resource Group Alert Bridge processes ALL alerts sent to it. To filter:\nCreate separate action groups for different resource groups Or use severity filtering Or configure SolarWinds rules to auto-close certain incidents Custom Fields Alert Bridge includes:\nAlert ID (for deduplication) Resource information Metric values Azure portal links For additional custom fields, see Advanced Configuration.\nNext Steps Configure Priority Mapping Set Up Severity Filtering Test Your Integration Need help? Contact support@cynteocloud.com",
    "description": "Azure Monitor Configuration Configure Azure Monitor alerts to work with Alert Bridge.\nOverview Cynteo Alert Bridge integrates with Azure Monitor using Action Groups and Common Alert Schema. This guide shows you how to configure your alerts properly.\nPrerequisites Azure subscription with Monitor alerts configured Contributor access to create/modify alert rules Alert Bridge deployed (Quick Start) Understanding Alert Flow Azure Resource → Azure Monitor → Alert Rule → Action Group → Alert Bridge → SolarWinds\rStep 1: Create Action Group 1.1 Navigate to Action Groups Open Azure Portal Search for “Monitor” Click “Alerts” in left menu Click “Action groups” Click \"+ Create\" 1.2 Configure Basics Subscription: Your Azure subscription\nResource Group: Same as Alert Bridge (recommended)\nRegion: Global (default)\nAction group name: alert-bridge-solarwinds\nDisplay name: SolarWinds (shows in alert emails)",
    "tags": [],
    "title": "Overview",
    "uri": "/overview/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs",
    "content": "🚀 Quick Links Get Started - Deployment guide Features - What Alert Bridge can do Troubleshooting - Common issues Support - Get help",
    "description": "🚀 Quick Links Get Started - Deployment guide Features - What Alert Bridge can do Troubleshooting - Common issues Support - Get help",
    "tags": [],
    "title": "Quick Links",
    "uri": "/quicklinks/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs",
    "content": "Summary This section describes usage guidance.",
    "description": "Usage Guidance for the Cynteo Alert Brige",
    "tags": [],
    "title": "Reference Docs",
    "uri": "/reference/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs",
    "content": "Summary This section describes usage guidance.",
    "description": "Usage Guidance for the Cynteo Alert Brige",
    "tags": [],
    "title": "Troubleshooting",
    "uri": "/troubleshooting/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs \u003e Troubleshooting",
    "content": "Deployment Errors Solutions for common errors during Azure deployment of Alert Bridge.\nCommon Deployment Errors Error: Resource Provider Not Registered Error Message:\nThe subscription is not registered to use namespace 'Microsoft.Logic'\rCause: Logic Apps resource provider not registered in subscription\nSolution:\naz provider register --namespace Microsoft.Logic az provider register --namespace Microsoft.KeyVault # Wait for registration (takes 2-5 minutes) az provider show --namespace Microsoft.Logic --query \"registrationState\"\rOr via Portal:\nGo to Subscriptions → Your subscription Click Resource providers Search for Microsoft.Logic Click Register Error: Location Not Available Error Message:\nThe location 'region-name' is not available for resource type 'Microsoft.Logic/workflows'\rCause: Logic Apps not available in selected region\nSolution:\nChoose a different region Check Logic Apps availability: az provider show \\ --namespace Microsoft.Logic \\ --query \"resourceTypes[?resourceType=='workflows'].locations\"\rRecommended Regions:\nEast US West US 2 North Europe West Europe Southeast Asia Error: Insufficient Permissions Error Message:\nThe client 'user@company.com' with object id 'xxx' does not have authorization to perform action 'Microsoft.Logic/workflows/write'\rCause: User lacks permissions to create Logic Apps\nSolution:\nNeed one of these roles:\nOwner - Full access Contributor - Can create resources Logic App Contributor - Can manage Logic Apps Request access from administrator:\naz role assignment create \\ --assignee user@company.com \\ --role \"Logic App Contributor\" \\ --scope \"/subscriptions/{subscription-id}/resourceGroups/{rg}\"\rError: Invalid API Token Error Message:\nDeployment validation failed: Invalid SolarWinds API token format\rCause: API token format incorrect\nSolution:\nToken must include “Bearer \" prefix:\n✅ Correct: Bearer eyJ0eXAiOiJKV1QiLCJhbGc... ❌ Wrong: eyJ0eXAiOiJKV1QiLCJhbGc...\rGet token from SolarWinds:\nSolarWinds → Profile → API Generate new token Copy full token including “Bearer \" Paste into deployment form Error: Key Vault Access Denied Error Message:\nThe user or application does not have access to key vault secrets\rCause: Logic App Managed Identity lacks Key Vault permissions\nSolution:\n# Get Logic App identity IDENTITY=$(az logicapp identity show \\ --name your-logic-app \\ --resource-group your-rg \\ --query principalId -o tsv) # Grant Key Vault access az keyvault set-policy \\ --name your-key-vault \\ --object-id $IDENTITY \\ --secret-permissions get list\rOr via Portal:\nGo to Key Vault → Access policies Click + Create Select Get and List for secrets Choose Logic App Managed Identity Click Create Error: Resource Group Not Found Error Message:\nResource group 'rg-name' could not be found\rCause: Trying to deploy to non-existent resource group\nSolution:\nCreate resource group first:\naz group create \\ --name cab-alert-bridge \\ --location eastus\rOr via Portal:\nAzure Portal → Resource groups Click + Create Enter name and region Click Review + create Error: Name Already Exists Error Message:\nLogic App name 'alert-bridge' already exists\rCause: Logic App name must be globally unique\nSolution:\nUse a unique name:\n❌ alert-bridge ✅ company-alert-bridge ✅ alert-bridge-prod-eastus ✅ company-cab-prod-001\rCheck availability:\naz logicapp show \\ --name your-name \\ --resource-group your-rg\rError: Quota Exceeded Error Message:\nOperation results in exceeding quota limits. Maximum allowed: 100, Current in use: 100\rCause: Subscription quota limit reached\nSolution:\nCheck current usage: az logicapp list --query \"length([])\"\rDelete unused Logic Apps: az logicapp delete \\ --name unused-app \\ --resource-group rg-name\rRequest quota increase: Azure Portal → Subscriptions Click Usage + quotas Search “Logic Apps” Click Request increase Error: Template Validation Failed Error Message:\nTemplate validation failed: Required parameter 'apiToken' was not provided\rCause: Missing required deployment parameters\nSolution:\nEnsure all required parameters provided:\nRequired Parameters:\n✅ Resource Group ✅ Logic App Name ✅ SolarWinds API Token ✅ SolarWinds Base URL ✅ Requester Email Optional Parameters:\nIncident Category (default: “Infrastructure”) Incident Subcategory (default: “Azure Monitor”) Assignee Group (default: none) Deployment Validation Pre-Deployment Checklist Before deploying, verify:\nSubscription Access - Owner or Contributor role Resource Providers - Microsoft.Logic registered Region Availability - Logic Apps available in region API Token - Valid SolarWinds token with “Bearer \" prefix SolarWinds URL - Correct API endpoint Resource Group - Exists or will be created Unique Name - Logic App name not in use Test Deployment Use Azure CLI to validate template:\naz deployment group validate \\ --resource-group your-rg \\ --template-file template.json \\ --parameters @parameters.json\rPost-Deployment Issues Logic App Not Running Symptom: Logic App deployed but not processing alerts\nChecks:\nLogic App Status: az logicapp show \\ --name your-app \\ --resource-group your-rg \\ --query \"state\"\rEnable if disabled: az logicapp start \\ --name your-app \\ --resource-group your-rg\rCheck for errors: Portal → Logic App → Overview Look for error messages or warnings Webhook URL Not Generated Symptom: Can’t find webhook URL for action groups\nSolution:\nGo to Logic App → Logic app designer Click the trigger at the top Click “Get trigger URL” or “Copy URL” If no URL shown: Save the workflow Check trigger is HTTP Request type Verify Logic App is enabled Configuration Not Applied Symptom: Settings provided during deployment not working\nSolution:\nCheck Logic App configuration: az logicapp config appsettings list \\ --name your-app \\ --resource-group your-rg\rUpdate if needed: az logicapp config appsettings set \\ --name your-app \\ --resource-group your-rg \\ --settings \"INCIDENT_CATEGORY=Infrastructure\"\rRollback and Recovery Failed Deployment Cleanup If deployment fails, clean up:\n# Delete failed deployment az deployment group delete \\ --name deployment-name \\ --resource-group your-rg # Delete partially created resources az resource delete --ids /subscriptions/.../resourceGroups/.../providers/...\rStart Over For complete fresh start:\n# Delete resource group (caution!) az group delete --name your-rg --yes # Create new resource group az group create --name your-rg --location eastus # Redeploy # Use Azure Marketplace or ARM template\rGetting Help Collect Diagnostic Information Before contacting support, gather:\nDeployment Error:\nFull error message Deployment timestamp Subscription ID Resource group name Activity Log:\naz monitor activity-log list \\ --resource-group your-rg \\ --offset 1h\rDeployment Details: az deployment group show \\ --name deployment-name \\ --resource-group your-rg\rContact Support Email: support@cynteocloud.com Include: All diagnostic information above Response Time: \u003c 24 hours See Also Quick Start Guide - Step-by-step deployment Common Issues - Runtime troubleshooting SolarWinds Setup - API token generation Questions? Contact support@cynteocloud.com",
    "description": "Troubleshoot Azure deployment errors for Alert Bridge",
    "tags": [],
    "title": "Deployment Errors",
    "uri": "/troubleshooting/deployment-errors/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs \u003e Usage Guide",
    "content": "Priority Mapping Learn how to map Azure Monitor alert severities to SolarWinds Service Desk priority levels.\nOverview Azure Monitor uses severities (Sev0-Sev4), while SolarWinds uses priorities (Critical, High, Medium, Low). Alert Bridge maps between these automatically.\nDefault Mapping Out of the box, Alert Bridge uses this mapping:\nAzure Severity SolarWinds Priority Description Sev0 Critical System down, immediate action required Sev1 High Major functionality impaired Sev2 Medium Moderate impact, workaround available Sev3 Low Minor issue, minimal impact Sev4 Low Informational, no immediate action Customizing Priority Mapping Priority mapping is configured during deployment. The solution can be customized to match your organization’s SolarWinds priority structure.\nTo request a priority mapping change, contact support@cynteocloud.com with your desired mapping.\nSolarWinds Priority Values Your SolarWinds instance may have different priority names. Common priority structures include:\nStandard SolarWinds Priorities:\nCritical High Medium Low Your organization may use custom priority names. The mapping is configured to match your specific SolarWinds priority structure during deployment.\nCustom Priority Examples Alert Bridge supports various priority mapping strategies:\nExample 1: Escalated Priorities All critical and error alerts mapped to high priority for faster response.\nExample 2: Custom Priority Names Organizations using custom priority names (e.g., “P1 - Critical”, “P2 - Urgent”) can configure the mapping accordingly.\nExample 3: Simplified Mapping Some organizations prefer to use only two priority levels (Critical and Normal) for simplicity.\nExample 4: Environment-Specific Different environments (Production vs Development) can use different priority mappings to reflect business impact.\nVerifying Priority Mapping When an Azure alert fires, you can verify the priority mapping worked correctly:\nCheck the SolarWinds Incident Open SolarWinds Service Desk Find the incident created from the alert Verify the priority field matches expectations For example, an Azure Sev1 alert should create a High priority incident (based on default mapping).\nPriority-Based Routing Different priority levels can trigger different response workflows in SolarWinds:\nSolarWinds Assignment Rules SolarWinds supports automatic assignment based on priority:\nCritical Priority → Route to On-Call Team High Priority → Route to Infrastructure Team Medium/Low Priority → Route to Operations Team This ensures the right team receives alerts based on severity.\nAdvanced Priority Scenarios Alert Bridge supports advanced priority mapping strategies including:\nResource Type Based - Different resources can have different priority mappings Environment Based - Production alerts prioritized higher than development Time-Based - After-hours alerts automatically escalated Tag-Based - Resource tags influence priority assignment Contact support@cynteocloud.com to discuss custom mapping requirements.\nSee Also Configuration Options - Available settings Severity Filtering - Filter by severity Custom Categories - SolarWinds categories Questions? Contact support@cynteocloud.com",
    "description": "Configure how Azure alert severities map to SolarWinds priorities",
    "tags": [],
    "title": "Priority Mapping",
    "uri": "/usage/prioritymapping/prioritymapping/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs \u003e Reference Docs",
    "content": "Security Overview Learn how Cynteo Alert Bridge protects your data and maintains security compliance.\nSecurity Architecture Zero Data Storage No Persistence - Alert data is processed in real-time and never stored Stateless Processing - Each alert is handled independently No Logging of Sensitive Data - Only operational logs without credentials Secure Credential Management Azure Key Vault - All API tokens stored encrypted in your Key Vault Managed Identity - No hardcoded credentials in code or configuration Automatic Rotation - Support for Key Vault secret rotation Least Privilege - Logic App uses minimum required permissions Network Security HTTPS Only - All communication encrypted in transit Private Endpoints - Optional VNet integration available IP Restrictions - Configure allowed source IPs in Logic App Webhook Validation - Azure Monitor signatures verified Compliance SOC 2 Type II Cynteo Alert Bridge is SOC 2 Type II compliant:\nAnnual audits performed Security controls verified Compliance report available upon request Data Residency Your Subscription - All resources deployed to YOUR Azure subscription Your Region - Deploy to any Azure region you choose Your Control - Full RBAC and access control No Third-Party Storage - Data never leaves your environment GDPR Compliance No Personal Data Processing - Only technical monitoring data Data Controller - You remain the data controller Right to Delete - Delete resources anytime Privacy by Design - Minimal data collection Access Control Azure RBAC Control who can:\nView Logic App workflow Modify configuration Access run history Manage credentials SolarWinds Permissions API token should have:\n✅ Create incidents ✅ Update incidents ✅ Add comments ❌ Delete incidents (not required) ❌ Manage users (not required) Audit \u0026 Monitoring Azure Monitor Integration Activity Logs - All configuration changes logged Diagnostic Logs - Logic App execution logs Alerts - Set up alerts on Logic App failures Metrics - Track success/failure rates Run History 30-Day Retention - Logic App maintains 30-day history Success/Failure Status - See which alerts succeeded Error Details - Debug failed executions No Sensitive Data - PII redacted from logs Security Best Practices Recommended Configuration Enable Diagnostic Logs\nSend to Log Analytics workspace Monitor for anomalies Set up alerting Use Managed Identity\nDon’t use connection strings Leverage Azure AD authentication Enable when possible Rotate Credentials\nUpdate SolarWinds token annually Use Key Vault for storage Enable secret expiration alerts Network Isolation\nUse Private Endpoints if required Configure NSG rules Limit public exposure Monitor Access\nReview RBAC assignments quarterly Audit Logic App modifications Track who accesses run history Incident Response Security Incident Contacts Email: security@cynteocloud.com Response Time: \u003c 4 hours for security issues Escalation: 24/7 on-call team available Vulnerability Disclosure Report security vulnerabilities to:\nsecurity@cynteocloud.com PGP key available upon request Responsible disclosure policy Compliance Documentation Available upon request:\nSOC 2 Type II Report Penetration Test Results Security Architecture Diagrams Data Flow Diagrams Contact sales@cynteocloud.com for access.\nSee Also Incident Fields - What data is sent Environment Variables - Configuration options SolarWinds Setup - API token permissions Questions? Contact support@cynteocloud.com",
    "description": "Security architecture and compliance information for Cynteo Alert Bridge",
    "tags": [],
    "title": "Security Overview",
    "uri": "/reference/security/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs \u003e Usage Guide",
    "content": "Summary This section describes usage guidance.",
    "description": "Usage Guidance for the Cynteo Alert Brige",
    "tags": [],
    "title": "ActionGroup",
    "uri": "/usage/actiongroup/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs \u003e Troubleshooting",
    "content": "Alert Not Creating Tickets Troubleshoot why your Azure Monitor alerts aren’t creating SolarWinds Service Desk incidents.\nQuick Diagnostic Checklist Work through this checklist systematically:\nAlert is actually firing in Azure Monitor Action group is configured correctly Logic App is enabled and running Logic App run history shows the alert SolarWinds API token is valid No severity filtering blocking the alert SolarWinds API is accessible Step 1: Verify Alert is Firing Check Azure Monitor Go to Azure Portal → Monitor → Alerts Look for your alert in the list Check Alert state: ✅ Fired - Alert is active ❌ Resolved - Alert cleared (won’t trigger unless configured) ❌ Not yet evaluated - Waiting for data Check Alert History Click your alert rule Go to History tab Look for recent state changes If no history → Alert hasn’t fired yet Manually Fire Test Alert Create a condition that will definitely fire:\nFor Metric Alert:\naz monitor metrics alert create \\ --name test-alert \\ --resource-group your-rg \\ --scopes \"/subscriptions/.../resourceGroups/.../providers/...\" \\ --condition \"avg Percentage CPU \u003e 1\" \\ --description \"Test alert - will fire immediately\"\rSet threshold very low so it fires immediately.\nStep 2: Verify Action Group Configuration Check Action Group Go to Monitor → Action groups Find your action group Verify it contains: ✅ Webhook action ✅ Correct Logic App webhook URL ✅ Common alert schema enabled Test Action Group Click your action group Click “Test” button Select “Webhook” action type Select “Common alert schema” Click “Test” Check Logic App run history Verify Alert Rule Uses Action Group Go to your alert rule Check Actions tab Verify action group is assigned If not, click “Add action group” Step 3: Check Logic App Status Is Logic App Enabled? az logicapp show \\ --name your-logic-app \\ --resource-group your-rg \\ --query \"state\"\rExpected: \"Enabled\"\nIf Disabled:\naz logicapp start \\ --name your-logic-app \\ --resource-group your-rg\rCheck Logic App Run History Go to Logic App → Overview Click “Runs history” Look for recent runs Check run status: ✅ Succeeded - Alert processed successfully ⚠️ Failed - See error details ❌ No runs - Alert not reaching Logic App Step 4: Diagnose Logic App Runs No Runs at All Cause: Alerts not reaching Logic App\nChecks:\nWebhook URL correct?\nGet URL: Logic App → Designer → Trigger → Copy URL Compare with action group webhook Must match exactly Logic App triggered manually?\n# Get trigger URL az logicapp show --name your-app --resource-group your-rg # Test with curl curl -X POST \"https://your-logic-app-url\" \\ -H \"Content-Type: application/json\" \\ -d '{\"test\": \"data\"}'\rNetwork restrictions?\nCheck if Logic App has IP restrictions Ensure Azure Monitor IPs are allowed Runs Failing Cause: Error in Logic App execution\nSteps:\nClick failed run Expand each step Look for red X (failed step) Read error message Common Errors:\nSolarWinds Authentication Error 401 Unauthorized: Invalid API token\rSolutions:\nVerify token in Logic App configuration Check “Bearer \" prefix included Generate new token if expired Test token with curl: curl -X GET \"https://api.samanage.com/incidents.json\" \\ -H \"X-Samanage-Authorization: Bearer YOUR_TOKEN\"\rSolarWinds API Error 400 Bad Request: Invalid category name\rSolutions:\nVerify category exists in SolarWinds Check spelling (case-sensitive) Verify priority values match SolarWinds Check required fields are populated Timeout Error 504 Gateway Timeout: SolarWinds API did not respond\rSolutions:\nCheck SolarWinds API status Retry the failed run Check SolarWinds API rate limits Verify network connectivity Runs Succeeding But No Ticket Cause: Incident created but you can’t find it\nChecks:\nCheck Logic App output:\nClick succeeded run Expand “Create or Update Incident” action Check Outputs Look for incidentId or incidentNumber Search SolarWinds:\nSearch for: \"Azure Alert\" Or: The specific alert name Filter by: Date created (today)\rCheck SolarWinds response:\nIn Logic App outputs, look for SolarWinds response Verify incident was created (200 or 201 status) Note the incident ID Step 5: Check Filtering Configuration Severity Filtering Alert might be filtered out by severity:\nCheck Configuration:\naz logicapp config appsettings list \\ --name your-app \\ --resource-group your-rg \\ --query \"[?name=='SEVERITY_FILTER' || name=='MIN_SEVERITY']\"\rExamples:\n{ \"SEVERITY_FILTER\": \"Sev0,Sev1\" }\r→ Only Sev0 and Sev1 create tickets. Your Sev2/3/4 alert is ignored.\nSolution: Update or remove filter:\naz logicapp config appsettings delete \\ --name your-app \\ --resource-group your-rg \\ --setting-names SEVERITY_FILTER MIN_SEVERITY\rStep 6: Network and Connectivity Can Logic App Reach SolarWinds? Test connectivity:\nVia Logic App:\nDesigner → Add new HTTP action URL: https://api.samanage.com/api_information.json Method: GET Headers: API token Run test Check Firewall:\nSolarWinds might have IP restrictions Add Logic App outbound IPs to whitelist Get IPs: az logicapp show \\ --name your-app \\ --resource-group your-rg \\ --query \"outboundIpAddresses\"\rSolarWinds API Status Check if SolarWinds API is experiencing issues:\nVisit SolarWinds Status Page Or test directly: curl -I https://api.samanage.com\rStep 7: Common Alert Schema Verify Schema Format Logic App expects Common Alert Schema. Check action group:\nGo to action group Click webhook action Verify “Enable common alert schema” is ✅ checked If unchecked:\nCheck the box Click Save Test again Validate Alert Payload Check if Azure is sending correct format:\nLogic App → Run History Click latest run Check Trigger outputs Verify structure: { \"schemaId\": \"azureMonitorCommonAlertSchema\", \"data\": { \"essentials\": { ... }, \"alertContext\": { ... } } }\rIf different, enable common alert schema in action group.\nStep 8: Permissions and Access Logic App Managed Identity If using Key Vault:\n# Check if Managed Identity enabled az logicapp identity show \\ --name your-app \\ --resource-group your-rg # Grant Key Vault access az keyvault set-policy \\ --name your-vault \\ --object-id \u003cidentity-id\u003e \\ --secret-permissions get\rSolarWinds API Token Permissions Token needs these permissions:\n✅ Read incidents ✅ Create incidents ✅ Update incidents ✅ Add comments Verify in SolarWinds:\nProfile → API Tokens Find your token Check permissions Regenerate if needed Debugging Tools Enable Diagnostic Logs az monitor diagnostic-settings create \\ --name logic-app-diagnostics \\ --resource /subscriptions/.../resourceGroups/.../providers/Microsoft.Logic/workflows/your-app \\ --logs '[{\"category\": \"WorkflowRuntime\", \"enabled\": true}]' \\ --workspace /subscriptions/.../resourceGroups/.../providers/Microsoft.OperationalInsights/workspaces/your-workspace\rView Logs in Log Analytics AzureDiagnostics | where ResourceProvider == \"MICROSOFT.LOGIC\" | where Resource == \"YOUR-LOGIC-APP\" | where TimeGenerated \u003e ago(1h) | project TimeGenerated, status_s, error_message_s | order by TimeGenerated desc\rTest with Sample Alert Use this test payload:\ncurl -X POST \"https://your-logic-app-url\" \\ -H \"Content-Type: application/json\" \\ -d '{ \"schemaId\": \"azureMonitorCommonAlertSchema\", \"data\": { \"essentials\": { \"alertId\": \"/subscriptions/test/providers/Microsoft.AlertsManagement/alerts/test-123\", \"alertRule\": \"Test Alert\", \"severity\": \"Sev1\", \"signalType\": \"Metric\", \"monitorCondition\": \"Fired\", \"monitoringService\": \"Platform\", \"alertTargetIDs\": [\"/subscriptions/test/resourceGroups/test/providers/Microsoft.Compute/virtualMachines/test-vm\"], \"originAlertId\": \"test-origin\", \"firedDateTime\": \"2025-10-29T10:00:00Z\", \"description\": \"Test alert for troubleshooting\" }, \"alertContext\": {} } }'\rStill Not Working? Collect Information Before contacting support:\nLogic App run history (screenshot or export) Alert rule configuration (screenshot) Action group configuration (screenshot) Error messages (full text) Logic App configuration: az logicapp config appsettings list \\ --name your-app \\ --resource-group your-rg\rContact Support Email: support@cynteocloud.com Include: All information from above Response Time: \u003c 24 hours See Also Common Issues - Other troubleshooting topics Configure Action Groups - Setup guide API Documentation - Technical reference Questions? Contact support@cynteocloud.com",
    "description": "Debug why Azure alerts aren't creating SolarWinds incidents",
    "tags": [],
    "title": "Alert Not Creating Tickets",
    "uri": "/troubleshooting/alert-not-creating-tickets/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs \u003e Reference Docs",
    "content": "Alert Schema Reference Understanding the Azure Monitor Common Alert Schema that Alert Bridge processes.\nOverview Azure Monitor uses the Common Alert Schema to provide a consistent format for all alert types. This makes it easier to process alerts from different sources.\nSchema Structure Top-Level Fields { \"schemaId\": \"azureMonitorCommonAlertSchema\", \"data\": { \"essentials\": { ... }, \"alertContext\": { ... } } }\rEssentials Section Core alert information (present in all alerts):\nField Type Description alertId String Unique alert instance ID alertRule String Name of the alert rule severity String Sev0, Sev1, Sev2, Sev3, Sev4 signalType String Metric, Log, Activity Log monitorCondition String Fired, Resolved monitoringService String Platform, Log Analytics, etc. alertTargetIDs Array Affected Azure resource IDs originAlertId String Original alert identifier firedDateTime String When alert fired (ISO 8601) resolvedDateTime String When alert resolved (ISO 8601) description String Alert description Alert Context Additional details specific to alert type:\nMetric Alerts { \"alertContext\": { \"properties\": {}, \"conditionType\": \"SingleResourceMultipleMetricCriteria\", \"condition\": { \"windowSize\": \"PT5M\", \"allOf\": [ { \"metricName\": \"Percentage CPU\", \"metricNamespace\": \"Microsoft.Compute/virtualMachines\", \"operator\": \"GreaterThan\", \"threshold\": \"90\", \"timeAggregation\": \"Average\", \"dimensions\": [], \"metricValue\": 95.5 } ] } } }\rLog Alerts { \"alertContext\": { \"SearchQuery\": \"Heartbeat | where TimeGenerated \u003e ago(5m)\", \"SearchIntervalStartTimeUtc\": \"2025-10-29T10:00:00Z\", \"SearchIntervalEndtimeUtc\": \"2025-10-29T10:05:00Z\", \"ResultCount\": 0, \"LinkToSearchResults\": \"https://portal.azure.com/...\", \"SeverityDescription\": \"Informational\", \"WorkspaceId\": \"...\" } }\rActivity Log Alerts { \"alertContext\": { \"authorization\": { \"action\": \"Microsoft.Compute/virtualMachines/write\", \"scope\": \"/subscriptions/...\" }, \"channels\": \"Operation\", \"claims\": \"...\", \"caller\": \"user@company.com\", \"eventSource\": \"Administrative\", \"eventTimestamp\": \"2025-10-29T10:00:00Z\", \"operationName\": \"Microsoft.Compute/virtualMachines/write\", \"operationId\": \"...\", \"status\": \"Succeeded\", \"subStatus\": \"\", \"submissionTimestamp\": \"2025-10-29T10:00:05Z\" } }\rHow Alert Bridge Uses Schema Field Mapping Alert Bridge extracts these fields to create SolarWinds incidents:\nAzure Field SolarWinds Field Transformation alertRule name Prefixed with “Azure Alert:” severity priority Mapped via configuration essentials + alertContext description Rich HTML format monitorCondition state Fired→New, Resolved→Resolved firedDateTime Incident timestamp ISO 8601 to local Deduplication Key Alert Bridge uses these fields to identify unique alerts:\n{alertId}-{originAlertId}\rMultiple firings of the same alert update the existing incident rather than creating duplicates.\nExample: Complete Alert { \"schemaId\": \"azureMonitorCommonAlertSchema\", \"data\": { \"essentials\": { \"alertId\": \"/subscriptions/.../providers/Microsoft.AlertsManagement/alerts/...\", \"alertRule\": \"High CPU Usage\", \"severity\": \"Sev1\", \"signalType\": \"Metric\", \"monitorCondition\": \"Fired\", \"monitoringService\": \"Platform\", \"alertTargetIDs\": [ \"/subscriptions/.../resourceGroups/prod/providers/Microsoft.Compute/virtualMachines/vm-web-01\" ], \"originAlertId\": \"...\", \"firedDateTime\": \"2025-10-29T10:00:00.0000000Z\", \"description\": \"CPU usage is above 90% for vm-web-01\" }, \"alertContext\": { \"properties\": {}, \"conditionType\": \"SingleResourceMultipleMetricCriteria\", \"condition\": { \"windowSize\": \"PT5M\", \"allOf\": [ { \"metricName\": \"Percentage CPU\", \"metricNamespace\": \"Microsoft.Compute/virtualMachines\", \"operator\": \"GreaterThan\", \"threshold\": \"90\", \"timeAggregation\": \"Average\", \"dimensions\": [], \"metricValue\": 95.5, \"webTestName\": null } ], \"windowStartTime\": \"2025-10-29T09:55:00Z\", \"windowEndTime\": \"2025-10-29T10:00:00Z\" } } } }\rTesting the Schema Send Test Alert Use this PowerShell script to test:\n$uri = \"https://your-logic-app-url\" $body = Get-Content -Path \"test-alert.json\" Invoke-RestMethod -Uri $uri -Method Post -Body $body -ContentType \"application/json\"\rValidate in Logic App Go to Logic App in Azure Portal View Run History Click latest run Inspect Inputs to see raw alert JSON Check Outputs for what was sent to SolarWinds See Also Incident Fields - Output format Configure Action Groups - Setup guide Azure Monitor Documentation Questions? Contact support@cynteocloud.com",
    "description": "Azure Monitor Common Alert Schema explained",
    "tags": [],
    "title": "Alert Schema Reference",
    "uri": "/reference/alertschema/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs \u003e Usage Guide",
    "content": "Severity Filtering Configure Alert Bridge to only create incidents for specific severity levels.\nOverview Not all alerts need a ticket. Use severity filtering to:\nReduce ticket noise Focus on critical issues Save SolarWinds API calls Improve team efficiency Azure Alert Severities Azure Monitor supports 5 severity levels:\nSeverity Description Typical Use Sev0 Critical Service outage, data loss Sev1 Error Major degradation, multiple users affected Sev2 Warning Performance issues, single user affected Sev3 Informational Potential issues, proactive monitoring Sev4 Verbose Debug info, detailed diagnostics Filtering Options Severity filtering is configured during deployment to control which alerts create incidents.\nOption 1: Whitelist Specific Severities Only create incidents for specific severities (e.g., only Sev0 and Sev1).\nResult: Only critical and error alerts create incidents. Warning and informational alerts are ignored.\nOption 2: Minimum Severity Threshold Create incidents for alerts at or above a severity threshold (e.g., Sev2 and above).\nResult: Critical, error, and warning alerts create incidents. Informational alerts are ignored.\nOption 3: No Filtering (Default) All severities create incidents for comprehensive tracking.\nTo configure severity filtering, specify your requirements during deployment or contact support@cynteocloud.com.\nCommon Filtering Scenarios Scenario 1: Critical Only Only create incidents for service outages (Sev0 alerts).\nUse Case: Production environments where only critical issues need immediate attention through tickets.\nScenario 2: Critical and High Create incidents for major issues (Sev0 and Sev1 alerts).\nUse Case: Balance between noise reduction and comprehensive tracking of significant issues.\nScenario 3: Warning and Above Exclude informational alerts (Sev3 and Sev4 filtered out).\nUse Case: Keep informational alerts in Azure Monitor but don’t create tickets for them.\nScenario 4: Environment-Specific Filtering Different environments can have different filtering rules.\nExample:\nProduction: Track Sev0, Sev1, and Sev2 alerts Development: Only track Sev0 alerts Understanding Your Filtering When configured, severity filtering automatically processes alerts according to your rules:\nMatching alerts → Create/update incidents in SolarWinds Filtered alerts → Logged but no incident created You can verify filtering is working by checking SolarWinds for which incidents are being created.\nAdvanced Filtering Scenarios Alert Bridge supports sophisticated filtering strategies beyond simple severity levels:\nResource Type Filtering Filter based on Azure resource type (e.g., only create tickets for VM and database alerts).\nTime-Based Filtering Apply different filtering rules based on time of day or day of week (e.g., all severities during business hours, critical only after hours).\nTag-Based Filtering Use Azure resource tags to control which resources create incidents.\nMulti-Criteria Filtering Combine severity with other factors like subscription, resource group, or alert type.\nFilter Strategy Best Practices Start Strict, Relax as Needed Organizations often start with stricter filtering (critical alerts only) and gradually expand to include additional severities based on operational needs.\nEnvironment-Appropriate Filtering Environment Typical Filter Production Sev0, Sev1, Sev2 Staging Sev0, Sev1 Development Sev0 only Monitor the Full Picture Even when alerts are filtered from ticket creation, they remain visible in Azure Monitor for trending and analysis.\nQuestions About Filtering? To configure or adjust severity filtering for your deployment, contact support@cynteocloud.com.\nSee Also Priority Mapping - Map severities to priorities Configuration Options - Available settings Azure Monitor Setup - Alert configuration Questions? Contact support@cynteocloud.com",
    "description": "Filter which alert severities create SolarWinds incidents",
    "tags": [],
    "title": "Severity Filtering",
    "uri": "/usage/severityfiltering/severityfiltering/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs",
    "content": "Summary This section describes usage guidance.",
    "description": "Usage Guidance for the Cynteo Alert Brige",
    "tags": [],
    "title": "Usage Guide",
    "uri": "/usage/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs \u003e Reference Docs",
    "content": "Configuration Options Learn about the configuration options available during deployment of Cynteo Alert Bridge.\nRequired Settings These are configured during initial deployment:\nVariable Type Description Example SOLARWINDS_API_TOKEN Secret SolarWinds API token Bearer abc123... SOLARWINDS_BASE_URL String SolarWinds instance URL https://api.samanage.com REQUESTER_EMAIL String Default requester email azure@company.com Optional Settings These options can be configured during deployment to customize behavior:\nIncident Mapping Variable Type Default Description INCIDENT_CATEGORY String \"Infrastructure\" Default category name INCIDENT_SUBCATEGORY String \"Azure Monitor\" Default subcategory ASSIGNEE_GROUP String null Auto-assign to team INCIDENT_PREFIX String \"Azure Alert:\" Prefix for incident names Priority Mapping Variable Type Default Description SEV0_PRIORITY String \"Critical\" Priority for Sev0 SEV1_PRIORITY String \"High\" Priority for Sev1 SEV2_PRIORITY String \"Medium\" Priority for Sev2 SEV3_PRIORITY String \"Low\" Priority for Sev3 SEV4_PRIORITY String \"Low\" Priority for Sev4 Filtering Variable Type Default Description SEVERITY_FILTER String null Only process these severities (comma-separated) IGNORE_RESOLVED Boolean false Don’t update incidents on resolution MIN_SEVERITY String null Minimum severity to process Advanced Options Variable Type Default Description DEDUP_WINDOW_HOURS Number 24 How long to track alerts for dedup MAX_DESCRIPTION_LENGTH Number 32000 Truncate descriptions TIMEZONE String \"UTC\" Timezone for timestamps ENABLE_DEBUG_LOGGING Boolean false Verbose logging Note: Configuration options are set during deployment. Contact your administrator or support@cynteocloud.com for configuration changes.\nConfiguration Examples These examples show how different settings affect incident creation:\nExample 1: Custom Priority Mapping { \"SEV0_PRIORITY\": \"Critical\", \"SEV1_PRIORITY\": \"High\", \"SEV2_PRIORITY\": \"Medium\", \"SEV3_PRIORITY\": \"Low\", \"SEV4_PRIORITY\": \"Low\" }\rExample 2: Severity Filtering Only create incidents for critical and high severity:\n{ \"SEVERITY_FILTER\": \"Sev0,Sev1\" }\rOr use minimum severity:\n{ \"MIN_SEVERITY\": \"Sev2\" }\rExample 3: Custom Categories { \"INCIDENT_CATEGORY\": \"Cloud Services\", \"INCIDENT_SUBCATEGORY\": \"Azure Monitoring\", \"ASSIGNEE_GROUP\": \"Cloud Operations Team\" }\rExample 4: Multiple Environments For different environments (dev/staging/prod), use different prefixes:\nProduction:\n{ \"INCIDENT_PREFIX\": \"[PROD] Azure Alert:\", \"ASSIGNEE_GROUP\": \"Production Support\" }\rStaging:\n{ \"INCIDENT_PREFIX\": \"[STAGING] Azure Alert:\", \"ASSIGNEE_GROUP\": \"Dev Team\" }\rUnderstanding Your Configuration The deployment wizard collects these settings and applies them automatically. All configuration is managed by your Azure administrator.\nFor questions about your specific configuration or to request changes, contact support@cynteocloud.com.\nSee Also Priority Mapping - How severities map to priorities Severity Filtering - Alert filtering options Custom Categories - SolarWinds categories Questions? Contact support@cynteocloud.com",
    "description": "Available configuration options for Cynteo Alert Bridge",
    "tags": [],
    "title": "Configuration Options",
    "uri": "/reference/environmentvariables/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs \u003e Usage Guide",
    "content": "Summary This section describes usage guidance.",
    "description": "Usage Guidance for the Cynteo Alert Brige",
    "tags": [],
    "title": "ITSM Setup",
    "uri": "/usage/itsm/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs \u003e Reference Docs",
    "content": "API Documentation Technical reference for integrating with Cynteo Alert Bridge.\nWebhook Endpoint Alert Bridge provides a secure webhook endpoint that accepts Azure Monitor alerts.\nEndpoint URL After deployment, a unique webhook URL is generated for your instance. This URL is:\nAutomatically configured in your Action Groups during setup Protected with signature-based authentication Unique to your deployment 🔒 Security: The webhook URL contains authentication tokens and should be kept confidential.\nRequest Format Headers POST /workflows/{id}/triggers/manual/paths/invoke HTTP/1.1 Host: prod-XX.region.logic.azure.com Content-Type: application/json User-Agent: Azure-Alerts/1.0\rBody Alert Bridge expects Azure Monitor Common Alert Schema:\n{ \"schemaId\": \"azureMonitorCommonAlertSchema\", \"data\": { \"essentials\": { \"alertId\": \"string\", \"alertRule\": \"string\", \"severity\": \"Sev0|Sev1|Sev2|Sev3|Sev4\", \"signalType\": \"Metric|Log|Activity Log\", \"monitorCondition\": \"Fired|Resolved\", \"monitoringService\": \"string\", \"alertTargetIDs\": [\"string\"], \"originAlertId\": \"string\", \"firedDateTime\": \"ISO8601 string\", \"resolvedDateTime\": \"ISO8601 string\", \"description\": \"string\" }, \"alertContext\": { // Alert type specific context } } }\rSee Alert Schema Reference for complete details.\nResponse Format Success Response HTTP/1.1 202 Accepted Content-Type: application/json { \"status\": \"accepted\", \"incidentId\": \"12345\", \"incidentNumber\": \"INC-001234\", \"action\": \"created|updated\", \"timestamp\": \"2025-10-29T10:00:00Z\" }\rError Responses 400 Bad Request { \"error\": { \"code\": \"InvalidSchema\", \"message\": \"Alert schema validation failed\", \"details\": \"Missing required field: alertRule\" } }\r401 Unauthorized { \"error\": { \"code\": \"InvalidSignature\", \"message\": \"Request signature validation failed\" } }\r500 Internal Server Error { \"error\": { \"code\": \"SolarWindsError\", \"message\": \"Failed to create incident in SolarWinds\", \"details\": \"API returned 401 Unauthorized\" } }\rRate Limits Azure Logic Apps Limits Tier Requests/Min Requests/Day Consumption 60 86,400 Standard 600 Unlimited SolarWinds API Limits Tier Requests/Hour Free 100 Standard 1,000 Premium 5,000 Note: Alert Bridge automatically queues requests to stay within limits.\nTesting the Integration Using Azure Action Group Test The easiest way to test Alert Bridge:\nGo to Azure Portal → Monitor → Action groups Select your action group Click “Test” Select the webhook action Click “Test” Check SolarWinds for the test incident Using Azure Alerts Fire a real alert to test end-to-end functionality:\nCreate a test alert rule with easy-to-trigger conditions Wait for the alert to fire Verify incident appears in SolarWinds Check that all fields are populated correctly Integration Security Webhook Authentication Each deployment has a unique, signed webhook URL Authentication is handled automatically URLs contain time-limited signatures Best Practices Keep webhook URLs confidential - treat them like passwords Use Azure Action Groups - don’t share webhook URLs externally Monitor for unauthorized access - review execution logs regularly Monitoring Integration Health Check Processing Status You can monitor Alert Bridge processing through Azure:\nAzure Portal → Your Alert Bridge resource View Run History to see recent alert processing Check for any failures or errors Review execution times Common Status Indicators ✅ Succeeded - Alert processed and incident created/updated ⚠️ Failed - Error occurred (check details) ⏸️ Skipped - Alert filtered (by severity or other rules) See Also Alert Schema - Input format details Incident Fields - Output format Configure Action Groups - Setup guide Questions? Contact support@cynteocloud.com",
    "description": "API reference for Cynteo Alert Bridge webhooks and integrations",
    "tags": [],
    "title": "API",
    "uri": "/reference/api/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs \u003e Usage Guide \u003e ITSM Setup Guide",
    "content": "SolarWinds API Token Complete guide to generating and managing your SolarWinds Service Desk API token for Alert Bridge.\nWhat is an API Token? An API token is a secure authentication credential that allows Alert Bridge to:\n✅ Create incidents in SolarWinds ✅ Update existing incidents ✅ Add comments to incidents ✅ Resolve incidents when alerts clear Generating a Token Step 1: Log into SolarWinds Go to your SolarWinds Service Desk URL Log in with administrator credentials Step 2: Navigate to API Settings Option A: Modern Interface\nClick your profile (top-right) Select “Developer” or “API” Click “Tokens” or “API Access” Option B: Classic Interface\nGo to Setup → Account Find “API Tokens” or “Integrations” Click “Generate New Token” Step 3: Create Token Click “Generate New Token” or “Create Token” Name: Cynteo Alert Bridge Description: Azure Monitor integration Permissions: Select required permissions (see below) Click “Generate” or “Create” Step 4: Copy Token ⚠️ Important: Copy the token NOW - you won’t see it again!\nBearer eyJ0eXAiOiJKV1QiLCJhbGc...\rStore securely in:\nAzure Key Vault (recommended) Password manager Secure note Required Permissions The API token needs these permissions:\nPermission Required Purpose Read Incidents ✅ Yes Check for existing incidents (dedup) Create Incidents ✅ Yes Create new incidents from alerts Update Incidents ✅ Yes Update incidents when alerts fire again Add Comments ✅ Yes Add alert updates as comments Resolve Incidents ⚠️ Optional Auto-resolve when alerts clear Delete Incidents ❌ No Not required (security best practice) Manage Users ❌ No Not required Admin Access ❌ No Not required Minimal Permissions For maximum security, only grant:\n- incidents:read\r- incidents:create\r- incidents:update\r- comments:create\rToken Format Full Token Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL2FwaS5zYW1hbmFnZS5jb20iLCJpYXQiOjE2MTYxNjE2MTYsImV4cCI6MTY0NzY5NzYxNiwianRpIjoiYWJjMTIzIn0.signature\rToken Parts Prefix: Bearer (with space) Type: JWT (JSON Web Token) Parts: Header.Payload.Signature Configuring Alert Bridge Option 1: Direct (Not Recommended) Store token directly in Logic App configuration:\n{ \"SOLARWINDS_API_TOKEN\": \"Bearer eyJ0eXAiOi...\" }\r⚠️ Not recommended - Token visible in Logic App configuration\nOption 2: Azure Key Vault (Recommended) Store token in Key Vault:\nStep 1: Add to Key Vault az keyvault secret set \\ --vault-name your-key-vault \\ --name solarwinds-api-token \\ --value \"Bearer eyJ0eXAiOi...\"\rStep 2: Grant Logic App Access # Enable Managed Identity on Logic App az logicapp identity assign \\ --name your-logic-app \\ --resource-group your-rg # Grant Key Vault access az keyvault set-policy \\ --name your-key-vault \\ --object-id \u003clogic-app-identity-id\u003e \\ --secret-permissions get\rStep 3: Reference in Logic App { \"SOLARWINDS_API_TOKEN\": \"@Microsoft.KeyVault(SecretUri=https://your-vault.vault.azure.net/secrets/solarwinds-api-token/)\" }\rTesting the Token Via cURL curl -X GET \"https://api.samanage.com/incidents.json\" \\ -H \"X-Samanage-Authorization: Bearer YOUR_TOKEN\" \\ -H \"Accept: application/json\"\rExpected: List of incidents (200 OK)\nError 401: Token invalid or expired\nVia PowerShell $headers = @{ \"X-Samanage-Authorization\" = \"Bearer YOUR_TOKEN\" \"Accept\" = \"application/json\" } Invoke-RestMethod -Uri \"https://api.samanage.com/incidents.json\" -Headers $headers\rVia Logic App Test Deploy Logic App with token Trigger a test alert Check Logic App run history Look for SolarWinds API errors Token Security Best Practices Use Key Vault - Never store in plain text Rotate Regularly - Update every 90 days Minimal Permissions - Only grant what’s needed Monitor Usage - Track API calls for anomalies Separate Tokens - Different tokens for dev/prod Rotation Schedule Environment Rotation Frequency Production Every 90 days Staging Every 180 days Development Annual Compromised Token If token is compromised:\nImmediately Revoke in SolarWinds Generate New Token Update Key Vault with new token Restart Logic App Review Audit Logs for unauthorized access Token Management Viewing Active Tokens SolarWinds → API Settings View list of active tokens See: Token name Creation date Last used date Expiration (if set) Revoking Tokens Find token in list Click “Revoke” or “Delete” Confirm revocation Token immediately invalidated Updating Token in Alert Bridge After generating new token:\nIf using Key Vault: az keyvault secret set \\ --vault-name your-key-vault \\ --name solarwinds-api-token \\ --value \"Bearer NEW_TOKEN_HERE\"\rLogic App automatically picks up new value within 5 minutes.\nIf using direct configuration: Go to Logic App → Configuration Update SOLARWINDS_API_TOKEN Click Save Logic App restarts Troubleshooting 401 Unauthorized Causes:\nToken expired Token revoked Token format incorrect (missing “Bearer “) Wrong SolarWinds instance URL Solutions:\nGenerate new token Verify token format: Bearer + token Check SolarWinds base URL matches your instance 403 Forbidden Causes:\nToken lacks required permissions User account disabled IP restrictions Solutions:\nCheck token permissions in SolarWinds Verify user account is active Check API access restrictions Token Not Found in Key Vault Causes:\nSecret name mismatch Logic App lacks Key Vault permissions Secret deleted Solutions:\nVerify secret exists: az keyvault secret show Check Logic App Managed Identity has access Restore secret if deleted API Limits Be aware of SolarWinds API rate limits:\nPlan Requests/Hour Requests/Day Trial 100 1,000 Standard 1,000 10,000 Premium 5,000 50,000 Enterprise Custom Custom Alert Bridge automatically respects these limits with request queuing.\nSee Also SolarWinds Setup - Complete setup guide Security Overview - Security best practices Environment Variables - Configuration options Questions? Contact support@cynteocloud.com",
    "description": "How to generate and manage SolarWinds Service Desk API tokens",
    "tags": [],
    "title": "SolarWinds API Token",
    "uri": "/usage/itsm/solarwinds/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs \u003e Reference Docs",
    "content": "Changelog All notable changes to Cynteo Alert Bridge.\nVersion 1.4.5 (Latest) - October 2025 Fixed ✅ Incident resolution now correctly updates SolarWinds state ✅ Smart comment deduplication prevents ticket spam ✅ Improved error handling for API timeouts ✅ Fixed timezone handling in incident timestamps Added 🎯 New priority mapping options 📊 Enhanced logging and diagnostics 🔍 Better error messages in run history Changed ⚡ Improved performance for high-volume alerting 📝 Updated documentation with more examples Version 1.4.0 - September 2025 Added 🎉 Support for custom incident categories 🔄 Automatic retry logic for transient failures 📧 Email notifications for configuration issues Fixed Fixed issue with special characters in alert names Resolved duplicate incident creation edge case Version 1.3.0 - August 2025 Added 🚀 Severity filtering options 🔐 Key Vault integration for API tokens 📊 Run history retention extended to 30 days Changed Improved deduplication algorithm Optimized Logic App workflow Version 1.2.0 - July 2025 Added 📱 Support for Activity Log alerts 🎨 Rich HTML formatting in incident descriptions 🔗 Direct links to Azure Portal in incidents Fixed Fixed handling of resolved alerts Improved error messages Version 1.1.0 - June 2025 Added 🌍 Multi-region support 📈 Enhanced metrics and monitoring 🔄 Auto-update capability Version 1.0.0 - May 2025 Initial Release ✅ Metric alert support ✅ Log alert support ✅ Incident creation and updates ✅ Priority mapping ✅ Smart deduplication Upcoming Features See our Roadmap for planned features.\nUpgrade Guide Automatic Updates Alert Bridge automatically updates to the latest version. No action required.\nBreaking Changes None in current version. All updates are backward compatible.\nQuestions? Contact support@cynteocloud.com",
    "description": "Version history and release notes for Cynteo Alert Bridge",
    "tags": [],
    "title": "Changelog",
    "uri": "/reference/changelog/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs \u003e Reference Docs",
    "content": "Roadmap Upcoming features and enhancements for Cynteo Alert Bridge.\nQ4 2025 🎯 High Priority Custom Field Mapping - Map Azure properties to custom SolarWinds fields ServiceNow Support - Expand beyond SolarWinds to ServiceNow Teams Integration - Send notifications to Microsoft Teams Advanced Filtering - Filter by resource tags, subscription, or resource group 📊 Enhancements Dashboard - Real-time monitoring dashboard for alert processing Analytics - Incident creation metrics and trends Bulk Actions - Update multiple incidents at once Q1 2026 🚀 New Features Multi-Tenant Support - Manage multiple Azure tenants Alert Enrichment - Add custom data to incidents Workflow Automation - Custom actions on alert conditions Incident Templates - Predefined templates for different alert types 🔧 Improvements Performance - 50% faster processing for high-volume environments Reliability - Enhanced retry logic and error recovery Logging - Detailed execution logs with search Q2 2026 🌟 Major Features Jira Integration - Support for Jira Service Management Slack Integration - Alert notifications in Slack PagerDuty Bridge - Integrate with PagerDuty for on-call Custom Webhooks - Send alerts to any HTTP endpoint 🎨 User Experience Configuration UI - Web-based configuration portal Alert Preview - Test alerts before deployment Documentation Hub - Interactive guides and tutorials Q3 2026 🔐 Enterprise Features SSO Integration - Azure AD and SAML support Audit Logging - Comprehensive audit trail Compliance Reports - SOC 2, HIPAA, ISO compliance reporting High Availability - Multi-region failover 📱 Mobile Mobile App - iOS and Android app for incident management Push Notifications - Real-time alert notifications Future Considerations Features under evaluation:\nAWS CloudWatch integration Google Cloud Monitoring integration Kubernetes alert support Custom alert aggregation rules Machine learning for alert prioritization Incident auto-remediation Request a Feature Have an idea? We’d love to hear it!\nHow to Submit Email: feedback@cynteocloud.com Subject: “Feature Request: [Your Feature]” Include: Use case description Expected behavior Why it’s important to you Community Voting Join our Community Forum to:\nVote on proposed features Discuss implementations Share use cases Connect with other users Release Schedule Major Versions - Quarterly (Q1, Q2, Q3, Q4) Minor Updates - Monthly Hotfixes - As needed All updates are automatic and backward compatible.\nBeta Program Get early access to new features!\nBenefits ✅ Try features before general release ✅ Provide feedback to shape development ✅ Priority support ✅ Exclusive webinars Join Beta Email beta@cynteocloud.com with:\nCompany name Current Alert Bridge usage Features you’re interested in Stay Updated: Subscribe to release notes\nQuestions? Contact support@cynteocloud.com",
    "description": "Planned features and enhancements for Cynteo Alert Bridge",
    "tags": [],
    "title": "Roadmap",
    "uri": "/reference/roadmap/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs \u003e Usage Guide \u003e Action Group Setup Guide",
    "content": "Complete guide to setting up Azure Monitor action groups for Alert Bridge.\nWhat is an Action Group? An Action Group is a collection of notification and action settings that can be reused across multiple alert rules. It defines what happens when an alert fires.\nFor Alert Bridge, the action group sends alert data to your SolarWinds integration via webhook.\nPrerequisites Azure subscription Alert Bridge deployed and running Contributor access to create action groups Step-by-Step Guide Step 1: Get Webhook URL Go to Azure Portal → Resource Groups Find your Alert Bridge resource group (e.g., rg-alert-bridge) Click the Logic App resource (name: logicapp-*) Click “Overview” tab Find “Workflow URL” or “Callback URL” Click “Copy URL” button The URL looks like:\nhttps://prod-123.eastus.logic.azure.com:443/workflows/abc123.../triggers/manual/paths/invoke?api-version=2016-10-01\u0026sp=%2Ftriggers...\rKeep this URL handy - you’ll need it in the next step.\nStep 2: Create Action Group Navigate to Action Groups In Azure Portal, search for “Monitor” Click “Alerts” in the left navigation Click “Action groups” Click \"+ Create\" button Basics Tab Subscription: Select your Azure subscription\nResource Group: Select same as Alert Bridge (recommended)\nRegion: Global (default)\nAction group name: alert-bridge-solarwinds\nDisplay name: SolarWinds\nNote: Display name appears in email/SMS notifications, keep it short!\nClick “Next: Notifications \u003e” (skip for now)\nNotifications Tab Skip this tab - we’ll use Actions instead.\nClick “Next: Actions \u003e”\nActions Tab Click “+ Add action”\nAction type: Select “Webhook” from dropdown\nName: Send to SolarWinds\nDetails:\nURI: Paste the webhook URL from Step 1 Enable common alert schema: ✅ CHECKED (Critical!) Click “OK”\nImportant: The “Enable common alert schema” checkbox MUST be checked for alerts to work properly!\nTags Tab (Optional) Add tags if desired:\nEnvironment: Production Purpose: ITSM Integration Click “Next: Review + create \u003e”\nReview and Create Review your settings Ensure “Enable common alert schema” shows Yes Click “Create” Wait ~30 seconds for creation to complete.\nStep 3: Test Action Group Manual Test After creation, click your action group name Click “Test action group” button (top toolbar) Sample type: Select “Metric Alert - CPU Percentage” Action type: Webhook Click “Test” button Verify Results In Azure:\nYou should see “Test completed successfully” Check timestamp to confirm it just ran In SolarWinds:\nGo to Incidents list Look for a new incident titled: “Azure Alert: Test” Should appear within 1-2 minutes If incident appears: ✅ Success! Your action group works!\nIf not: See Troubleshooting below\nStep 4: Add to Alert Rules Now add this action group to your existing alert rules:\nFor Each Alert Rule: Monitor → Alerts → Alert rules Click an alert rule you want to send to SolarWinds Click “Edit” or “Manage actions” Action groups section → Click \"+ Add action group\" Select alert-bridge-solarwinds Click “Save” Repeat for all relevant alerts.\nAdvanced Configuration Multiple Action Groups You can create multiple action groups for different scenarios:\nExample 1: By Environment\nalert-bridge-prod - Production alerts only alert-bridge-dev - Development alerts Example 2: By Severity\nalert-bridge-critical - Sev0 and Sev1 only alert-bridge-info - Sev2 and Sev3 Example 3: By Team\nalert-bridge-infrastructure alert-bridge-application Adding Multiple Actions You can add multiple actions to one action group:\nExample: Email + SolarWinds\nAdd webhook action (SolarWinds) Add email action (ops@company.com) Both happen when alert fires Suppress Alerts Configure action group suppression to prevent alert storms:\nEdit alert rule Advanced options → Alert suppression Suppress alerts for: 5 minutes Save This prevents duplicate alerts within 5 minutes.\nTroubleshooting Test Failed: “Bad Request” Cause: Common alert schema not enabled\nFix:\nEdit action group Edit webhook action ✅ Check “Enable common alert schema” Save and test again Test Succeeded But No Incident Possible causes:\n1. Check Logic App Run History\nGo to Logic App resource Click “Overview” → “Runs history” Find the recent run Click to see details If succeeded: Issue is with SolarWinds API\nIf failed: Check error message\n2. Check SolarWinds API Token\nVerify token is valid Check token has create incident permission See SolarWinds Setup 3. Check Logic App Configuration\nEnsure API token stored in Key Vault Verify Key Vault access policy allows Logic App Check SolarWinds base URL is correct Incidents Created But Missing Data Cause: Legacy alert schema used\nFix:\nEdit action group webhook action ✅ Ensure “Enable common alert schema” is checked Save Multiple Duplicate Incidents Cause: Multiple action groups configured for same alert\nFix:\nCheck alert rule → Actions Remove duplicate action groups Keep only one SolarWinds action group per alert Common Alert Schema Example When “Enable common alert schema” is checked, Azure sends:\n{ \"schemaId\": \"azureMonitorCommonAlertSchema\", \"data\": { \"essentials\": { \"alertId\": \"/subscriptions/.../Microsoft.Insights/...\", \"alertRule\": \"High CPU Usage\", \"severity\": \"Sev1\", \"signalType\": \"Metric\", \"monitorCondition\": \"Fired\", \"monitoringService\": \"Platform\", \"alertTargetIDs\": [\"/subscriptions/.../Microsoft.Compute/virtualMachines/vm1\"], \"configurationItems\": [\"vm1\"], \"originAlertId\": \"abc123\", \"firedDateTime\": \"2025-10-29T10:00:00Z\", \"description\": \"CPU has been above threshold\", \"essentialsVersion\": \"1.0\", \"alertContextVersion\": \"1.0\" }, \"alertContext\": { \"properties\": null, \"conditionType\": \"SingleResourceMultipleMetricCriteria\", \"condition\": { \"windowSize\": \"PT5M\", \"allOf\": [ { \"metricName\": \"Percentage CPU\", \"metricNamespace\": \"Microsoft.Compute/virtualMachines\", \"operator\": \"GreaterThan\", \"threshold\": \"80\", \"timeAggregation\": \"Average\", \"dimensions\": [], \"metricValue\": 95.5 } ] } } } }\rAlert Bridge uses this structured data to create rich SolarWinds incidents!\nBest Practices 1. Use Descriptive Names Good: alert-bridge-prod-infrastructure\nBad: ag1\n2. One Action Group Per Environment Separate prod and non-prod alerts:\nBetter control Different SolarWinds priorities Easier troubleshooting 3. Document Your Action Groups Add tags and descriptions:\nName: alert-bridge-prod\rDescription: Sends production alerts to SolarWinds Service Desk\rTags: Environment=Production, System=ITSM\r4. Test Regularly Test action groups:\nAfter creation After any configuration changes Monthly as part of DR testing 5. Monitor Action Group Usage Use Azure Monitor to track:\nAction group invocations Failures Latency Security Considerations Webhook URL Security The webhook URL contains:\nAPI version - Safe to expose Signature parameter - Validates request authenticity Access token - Securely embedded Keep the URL private but it’s safe if leaked (signature validation prevents abuse).\nRotating URLs If webhook URL is compromised:\nGo to Logic App Settings → Access control Regenerate access key Update all action groups with new URL Next Steps Configure Priority Mapping Set Up Severity Filtering Test Your Integration Additional Resources Azure Action Groups Documentation Common Alert Schema Reference Webhook Action Reference Need help? Contact support@cynteocloud.com",
    "description": "Bicep Quickstart Guidance for the Azure Verified Modules (AVM) program",
    "tags": [],
    "title": "Action Group Setup Guide",
    "uri": "/usage/actiongroup/actiongroup/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Cynteo Alert Bridge Docs",
    "uri": "/index.html"
  },
  {
    "breadcrumb": "Cynteo Alert Bridge Docs",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/tags/index.html"
  }
]
